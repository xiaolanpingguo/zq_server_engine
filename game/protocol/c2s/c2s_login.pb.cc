// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c2s_login.proto

#include "c2s_login.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace C2S {
PROTOBUF_CONSTEXPR C2SLoginReq::C2SLoginReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sdk_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sdk_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channel_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2SLoginReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2SLoginReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2SLoginReqDefaultTypeInternal() {}
  union {
    C2SLoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2SLoginReqDefaultTypeInternal _C2SLoginReq_default_instance_;
PROTOBUF_CONSTEXPR C2SLoginRes::C2SLoginRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profile_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2SLoginResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2SLoginResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2SLoginResDefaultTypeInternal() {}
  union {
    C2SLoginRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2SLoginResDefaultTypeInternal _C2SLoginRes_default_instance_;
PROTOBUF_CONSTEXPR C2SLoginZoneReq::C2SLoginZoneReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.profile_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2SLoginZoneReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2SLoginZoneReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2SLoginZoneReqDefaultTypeInternal() {}
  union {
    C2SLoginZoneReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2SLoginZoneReqDefaultTypeInternal _C2SLoginZoneReq_default_instance_;
PROTOBUF_CONSTEXPR C2SLoginZoneRes::C2SLoginZoneRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2SLoginZoneResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2SLoginZoneResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2SLoginZoneResDefaultTypeInternal() {}
  union {
    C2SLoginZoneRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2SLoginZoneResDefaultTypeInternal _C2SLoginZoneRes_default_instance_;
PROTOBUF_CONSTEXPR C2SKickoutRes::C2SKickoutRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2SKickoutResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2SKickoutResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2SKickoutResDefaultTypeInternal() {}
  union {
    C2SKickoutRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2SKickoutResDefaultTypeInternal _C2SKickoutRes_default_instance_;
}  // namespace C2S
static ::_pb::Metadata file_level_metadata_c2s_5flogin_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_c2s_5flogin_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_c2s_5flogin_2eproto = nullptr;

const uint32_t TableStruct_c2s_5flogin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::C2S::C2SLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::C2S::C2SLoginReq, _impl_.sdk_user_id_),
  PROTOBUF_FIELD_OFFSET(::C2S::C2SLoginReq, _impl_.sdk_token_),
  PROTOBUF_FIELD_OFFSET(::C2S::C2SLoginReq, _impl_.channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::C2S::C2SLoginRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::C2S::C2SLoginRes, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::C2S::C2SLoginRes, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::C2S::C2SLoginRes, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::C2S::C2SLoginRes, _impl_.profile_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::C2S::C2SLoginZoneReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::C2S::C2SLoginZoneReq, _impl_.profile_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::C2S::C2SLoginZoneRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::C2S::C2SLoginZoneRes, _impl_.error_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::C2S::C2SKickoutRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::C2S::C2SKickoutRes, _impl_.error_code_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::C2S::C2SLoginReq)},
  { 9, -1, -1, sizeof(::C2S::C2SLoginRes)},
  { 19, -1, -1, sizeof(::C2S::C2SLoginZoneReq)},
  { 26, -1, -1, sizeof(::C2S::C2SLoginZoneRes)},
  { 33, -1, -1, sizeof(::C2S::C2SKickoutRes)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::C2S::_C2SLoginReq_default_instance_._instance,
  &::C2S::_C2SLoginRes_default_instance_._instance,
  &::C2S::_C2SLoginZoneReq_default_instance_._instance,
  &::C2S::_C2SLoginZoneRes_default_instance_._instance,
  &::C2S::_C2SKickoutRes_default_instance_._instance,
};

const char descriptor_table_protodef_c2s_5flogin_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017c2s_login.proto\022\003C2S\032\020c2s_common.proto"
  "\"I\n\013C2SLoginReq\022\023\n\013sdk_user_id\030\001 \001(\t\022\021\n\t"
  "sdk_token\030\002 \001(\t\022\022\n\nchannel_id\030\003 \001(\005\"O\n\013C"
  "2SLoginRes\022\022\n\nerror_code\030\001 \001(\005\022\n\n\002ip\030\002 \001"
  "(\t\022\014\n\004port\030\003 \001(\005\022\022\n\nprofile_id\030\004 \001(\t\"%\n\017"
  "C2SLoginZoneReq\022\022\n\nprofile_id\030\001 \001(\t\":\n\017C"
  "2SLoginZoneRes\022\'\n\nerror_code\030\001 \001(\0162\023.C2S"
  ".C2S_ERROR_CODE\"8\n\rC2SKickoutRes\022\'\n\nerro"
  "r_code\030\001 \001(\0162\023.C2S.C2S_ERROR_CODEb\006proto"
  "3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_c2s_5flogin_2eproto_deps[1] = {
  &::descriptor_table_c2s_5fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_c2s_5flogin_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_c2s_5flogin_2eproto = {
    false, false, 361, descriptor_table_protodef_c2s_5flogin_2eproto,
    "c2s_login.proto",
    &descriptor_table_c2s_5flogin_2eproto_once, descriptor_table_c2s_5flogin_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_c2s_5flogin_2eproto::offsets,
    file_level_metadata_c2s_5flogin_2eproto, file_level_enum_descriptors_c2s_5flogin_2eproto,
    file_level_service_descriptors_c2s_5flogin_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_c2s_5flogin_2eproto_getter() {
  return &descriptor_table_c2s_5flogin_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_c2s_5flogin_2eproto(&descriptor_table_c2s_5flogin_2eproto);
namespace C2S {

// ===================================================================

class C2SLoginReq::_Internal {
 public:
};

C2SLoginReq::C2SLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:C2S.C2SLoginReq)
}
C2SLoginReq::C2SLoginReq(const C2SLoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2SLoginReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sdk_user_id_){}
    , decltype(_impl_.sdk_token_){}
    , decltype(_impl_.channel_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sdk_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdk_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdk_user_id().empty()) {
    _this->_impl_.sdk_user_id_.Set(from._internal_sdk_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sdk_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdk_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdk_token().empty()) {
    _this->_impl_.sdk_token_.Set(from._internal_sdk_token(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.channel_id_ = from._impl_.channel_id_;
  // @@protoc_insertion_point(copy_constructor:C2S.C2SLoginReq)
}

inline void C2SLoginReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sdk_user_id_){}
    , decltype(_impl_.sdk_token_){}
    , decltype(_impl_.channel_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sdk_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdk_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdk_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdk_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C2SLoginReq::~C2SLoginReq() {
  // @@protoc_insertion_point(destructor:C2S.C2SLoginReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2SLoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sdk_user_id_.Destroy();
  _impl_.sdk_token_.Destroy();
}

void C2SLoginReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2SLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:C2S.C2SLoginReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sdk_user_id_.ClearToEmpty();
  _impl_.sdk_token_.ClearToEmpty();
  _impl_.channel_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2SLoginReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sdk_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sdk_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "C2S.C2SLoginReq.sdk_user_id"));
        } else
          goto handle_unusual;
        continue;
      // string sdk_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sdk_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "C2S.C2SLoginReq.sdk_token"));
        } else
          goto handle_unusual;
        continue;
      // int32 channel_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2SLoginReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:C2S.C2SLoginReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sdk_user_id = 1;
  if (!this->_internal_sdk_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdk_user_id().data(), static_cast<int>(this->_internal_sdk_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "C2S.C2SLoginReq.sdk_user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sdk_user_id(), target);
  }

  // string sdk_token = 2;
  if (!this->_internal_sdk_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdk_token().data(), static_cast<int>(this->_internal_sdk_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "C2S.C2SLoginReq.sdk_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sdk_token(), target);
  }

  // int32 channel_id = 3;
  if (this->_internal_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:C2S.C2SLoginReq)
  return target;
}

size_t C2SLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:C2S.C2SLoginReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sdk_user_id = 1;
  if (!this->_internal_sdk_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdk_user_id());
  }

  // string sdk_token = 2;
  if (!this->_internal_sdk_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdk_token());
  }

  // int32 channel_id = 3;
  if (this->_internal_channel_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2SLoginReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2SLoginReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2SLoginReq::GetClassData() const { return &_class_data_; }


void C2SLoginReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2SLoginReq*>(&to_msg);
  auto& from = static_cast<const C2SLoginReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:C2S.C2SLoginReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sdk_user_id().empty()) {
    _this->_internal_set_sdk_user_id(from._internal_sdk_user_id());
  }
  if (!from._internal_sdk_token().empty()) {
    _this->_internal_set_sdk_token(from._internal_sdk_token());
  }
  if (from._internal_channel_id() != 0) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2SLoginReq::CopyFrom(const C2SLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:C2S.C2SLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SLoginReq::IsInitialized() const {
  return true;
}

void C2SLoginReq::InternalSwap(C2SLoginReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdk_user_id_, lhs_arena,
      &other->_impl_.sdk_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdk_token_, lhs_arena,
      &other->_impl_.sdk_token_, rhs_arena
  );
  swap(_impl_.channel_id_, other->_impl_.channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2SLoginReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_c2s_5flogin_2eproto_getter, &descriptor_table_c2s_5flogin_2eproto_once,
      file_level_metadata_c2s_5flogin_2eproto[0]);
}

// ===================================================================

class C2SLoginRes::_Internal {
 public:
};

C2SLoginRes::C2SLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:C2S.C2SLoginRes)
}
C2SLoginRes::C2SLoginRes(const C2SLoginRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2SLoginRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , decltype(_impl_.profile_id_){}
    , decltype(_impl_.error_code_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.profile_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profile_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profile_id().empty()) {
    _this->_impl_.profile_id_.Set(from._internal_profile_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.error_code_, &from._impl_.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.port_) -
    reinterpret_cast<char*>(&_impl_.error_code_)) + sizeof(_impl_.port_));
  // @@protoc_insertion_point(copy_constructor:C2S.C2SLoginRes)
}

inline void C2SLoginRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , decltype(_impl_.profile_id_){}
    , decltype(_impl_.error_code_){0}
    , decltype(_impl_.port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profile_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profile_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C2SLoginRes::~C2SLoginRes() {
  // @@protoc_insertion_point(destructor:C2S.C2SLoginRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2SLoginRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
  _impl_.profile_id_.Destroy();
}

void C2SLoginRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2SLoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:C2S.C2SLoginRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  _impl_.profile_id_.ClearToEmpty();
  ::memset(&_impl_.error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.port_) -
      reinterpret_cast<char*>(&_impl_.error_code_)) + sizeof(_impl_.port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2SLoginRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "C2S.C2SLoginRes.ip"));
        } else
          goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string profile_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_profile_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "C2S.C2SLoginRes.profile_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2SLoginRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:C2S.C2SLoginRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_code = 1;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_error_code(), target);
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "C2S.C2SLoginRes.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  // string profile_id = 4;
  if (!this->_internal_profile_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profile_id().data(), static_cast<int>(this->_internal_profile_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "C2S.C2SLoginRes.profile_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_profile_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:C2S.C2SLoginRes)
  return target;
}

size_t C2SLoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:C2S.C2SLoginRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string profile_id = 4;
  if (!this->_internal_profile_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profile_id());
  }

  // int32 error_code = 1;
  if (this->_internal_error_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2SLoginRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2SLoginRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2SLoginRes::GetClassData() const { return &_class_data_; }


void C2SLoginRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2SLoginRes*>(&to_msg);
  auto& from = static_cast<const C2SLoginRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:C2S.C2SLoginRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_profile_id().empty()) {
    _this->_internal_set_profile_id(from._internal_profile_id());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2SLoginRes::CopyFrom(const C2SLoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:C2S.C2SLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SLoginRes::IsInitialized() const {
  return true;
}

void C2SLoginRes::InternalSwap(C2SLoginRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profile_id_, lhs_arena,
      &other->_impl_.profile_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C2SLoginRes, _impl_.port_)
      + sizeof(C2SLoginRes::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(C2SLoginRes, _impl_.error_code_)>(
          reinterpret_cast<char*>(&_impl_.error_code_),
          reinterpret_cast<char*>(&other->_impl_.error_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C2SLoginRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_c2s_5flogin_2eproto_getter, &descriptor_table_c2s_5flogin_2eproto_once,
      file_level_metadata_c2s_5flogin_2eproto[1]);
}

// ===================================================================

class C2SLoginZoneReq::_Internal {
 public:
};

C2SLoginZoneReq::C2SLoginZoneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:C2S.C2SLoginZoneReq)
}
C2SLoginZoneReq::C2SLoginZoneReq(const C2SLoginZoneReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2SLoginZoneReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.profile_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.profile_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profile_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profile_id().empty()) {
    _this->_impl_.profile_id_.Set(from._internal_profile_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:C2S.C2SLoginZoneReq)
}

inline void C2SLoginZoneReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.profile_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.profile_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profile_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C2SLoginZoneReq::~C2SLoginZoneReq() {
  // @@protoc_insertion_point(destructor:C2S.C2SLoginZoneReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2SLoginZoneReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.profile_id_.Destroy();
}

void C2SLoginZoneReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2SLoginZoneReq::Clear() {
// @@protoc_insertion_point(message_clear_start:C2S.C2SLoginZoneReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.profile_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2SLoginZoneReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string profile_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_profile_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "C2S.C2SLoginZoneReq.profile_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2SLoginZoneReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:C2S.C2SLoginZoneReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string profile_id = 1;
  if (!this->_internal_profile_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profile_id().data(), static_cast<int>(this->_internal_profile_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "C2S.C2SLoginZoneReq.profile_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_profile_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:C2S.C2SLoginZoneReq)
  return target;
}

size_t C2SLoginZoneReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:C2S.C2SLoginZoneReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string profile_id = 1;
  if (!this->_internal_profile_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profile_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2SLoginZoneReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2SLoginZoneReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2SLoginZoneReq::GetClassData() const { return &_class_data_; }


void C2SLoginZoneReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2SLoginZoneReq*>(&to_msg);
  auto& from = static_cast<const C2SLoginZoneReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:C2S.C2SLoginZoneReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_profile_id().empty()) {
    _this->_internal_set_profile_id(from._internal_profile_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2SLoginZoneReq::CopyFrom(const C2SLoginZoneReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:C2S.C2SLoginZoneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SLoginZoneReq::IsInitialized() const {
  return true;
}

void C2SLoginZoneReq::InternalSwap(C2SLoginZoneReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profile_id_, lhs_arena,
      &other->_impl_.profile_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C2SLoginZoneReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_c2s_5flogin_2eproto_getter, &descriptor_table_c2s_5flogin_2eproto_once,
      file_level_metadata_c2s_5flogin_2eproto[2]);
}

// ===================================================================

class C2SLoginZoneRes::_Internal {
 public:
};

C2SLoginZoneRes::C2SLoginZoneRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:C2S.C2SLoginZoneRes)
}
C2SLoginZoneRes::C2SLoginZoneRes(const C2SLoginZoneRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2SLoginZoneRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.error_code_ = from._impl_.error_code_;
  // @@protoc_insertion_point(copy_constructor:C2S.C2SLoginZoneRes)
}

inline void C2SLoginZoneRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C2SLoginZoneRes::~C2SLoginZoneRes() {
  // @@protoc_insertion_point(destructor:C2S.C2SLoginZoneRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2SLoginZoneRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C2SLoginZoneRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2SLoginZoneRes::Clear() {
// @@protoc_insertion_point(message_clear_start:C2S.C2SLoginZoneRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2SLoginZoneRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .C2S.C2S_ERROR_CODE error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error_code(static_cast<::C2S::C2S_ERROR_CODE>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2SLoginZoneRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:C2S.C2SLoginZoneRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .C2S.C2S_ERROR_CODE error_code = 1;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:C2S.C2SLoginZoneRes)
  return target;
}

size_t C2SLoginZoneRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:C2S.C2SLoginZoneRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .C2S.C2S_ERROR_CODE error_code = 1;
  if (this->_internal_error_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2SLoginZoneRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2SLoginZoneRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2SLoginZoneRes::GetClassData() const { return &_class_data_; }


void C2SLoginZoneRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2SLoginZoneRes*>(&to_msg);
  auto& from = static_cast<const C2SLoginZoneRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:C2S.C2SLoginZoneRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2SLoginZoneRes::CopyFrom(const C2SLoginZoneRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:C2S.C2SLoginZoneRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SLoginZoneRes::IsInitialized() const {
  return true;
}

void C2SLoginZoneRes::InternalSwap(C2SLoginZoneRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.error_code_, other->_impl_.error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2SLoginZoneRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_c2s_5flogin_2eproto_getter, &descriptor_table_c2s_5flogin_2eproto_once,
      file_level_metadata_c2s_5flogin_2eproto[3]);
}

// ===================================================================

class C2SKickoutRes::_Internal {
 public:
};

C2SKickoutRes::C2SKickoutRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:C2S.C2SKickoutRes)
}
C2SKickoutRes::C2SKickoutRes(const C2SKickoutRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2SKickoutRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.error_code_ = from._impl_.error_code_;
  // @@protoc_insertion_point(copy_constructor:C2S.C2SKickoutRes)
}

inline void C2SKickoutRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C2SKickoutRes::~C2SKickoutRes() {
  // @@protoc_insertion_point(destructor:C2S.C2SKickoutRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2SKickoutRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C2SKickoutRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2SKickoutRes::Clear() {
// @@protoc_insertion_point(message_clear_start:C2S.C2SKickoutRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2SKickoutRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .C2S.C2S_ERROR_CODE error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error_code(static_cast<::C2S::C2S_ERROR_CODE>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2SKickoutRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:C2S.C2SKickoutRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .C2S.C2S_ERROR_CODE error_code = 1;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:C2S.C2SKickoutRes)
  return target;
}

size_t C2SKickoutRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:C2S.C2SKickoutRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .C2S.C2S_ERROR_CODE error_code = 1;
  if (this->_internal_error_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2SKickoutRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2SKickoutRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2SKickoutRes::GetClassData() const { return &_class_data_; }


void C2SKickoutRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2SKickoutRes*>(&to_msg);
  auto& from = static_cast<const C2SKickoutRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:C2S.C2SKickoutRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2SKickoutRes::CopyFrom(const C2SKickoutRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:C2S.C2SKickoutRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SKickoutRes::IsInitialized() const {
  return true;
}

void C2SKickoutRes::InternalSwap(C2SKickoutRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.error_code_, other->_impl_.error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2SKickoutRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_c2s_5flogin_2eproto_getter, &descriptor_table_c2s_5flogin_2eproto_once,
      file_level_metadata_c2s_5flogin_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace C2S
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::C2S::C2SLoginReq*
Arena::CreateMaybeMessage< ::C2S::C2SLoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::C2S::C2SLoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::C2S::C2SLoginRes*
Arena::CreateMaybeMessage< ::C2S::C2SLoginRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::C2S::C2SLoginRes >(arena);
}
template<> PROTOBUF_NOINLINE ::C2S::C2SLoginZoneReq*
Arena::CreateMaybeMessage< ::C2S::C2SLoginZoneReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::C2S::C2SLoginZoneReq >(arena);
}
template<> PROTOBUF_NOINLINE ::C2S::C2SLoginZoneRes*
Arena::CreateMaybeMessage< ::C2S::C2SLoginZoneRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::C2S::C2SLoginZoneRes >(arena);
}
template<> PROTOBUF_NOINLINE ::C2S::C2SKickoutRes*
Arena::CreateMaybeMessage< ::C2S::C2SKickoutRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::C2S::C2SKickoutRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
