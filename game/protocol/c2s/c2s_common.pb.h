// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c2s_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_c2s_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_c2s_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_c2s_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_c2s_5fcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_c2s_5fcommon_2eproto;
namespace C2S {
class C2SHeartBeat;
struct C2SHeartBeatDefaultTypeInternal;
extern C2SHeartBeatDefaultTypeInternal _C2SHeartBeat_default_instance_;
class C2SLoginReq;
struct C2SLoginReqDefaultTypeInternal;
extern C2SLoginReqDefaultTypeInternal _C2SLoginReq_default_instance_;
class C2SLoginRes;
struct C2SLoginResDefaultTypeInternal;
extern C2SLoginResDefaultTypeInternal _C2SLoginRes_default_instance_;
class C2SLoginZoneReq;
struct C2SLoginZoneReqDefaultTypeInternal;
extern C2SLoginZoneReqDefaultTypeInternal _C2SLoginZoneReq_default_instance_;
class C2SLoginZoneRes;
struct C2SLoginZoneResDefaultTypeInternal;
extern C2SLoginZoneResDefaultTypeInternal _C2SLoginZoneRes_default_instance_;
}  // namespace C2S
PROTOBUF_NAMESPACE_OPEN
template<> ::C2S::C2SHeartBeat* Arena::CreateMaybeMessage<::C2S::C2SHeartBeat>(Arena*);
template<> ::C2S::C2SLoginReq* Arena::CreateMaybeMessage<::C2S::C2SLoginReq>(Arena*);
template<> ::C2S::C2SLoginRes* Arena::CreateMaybeMessage<::C2S::C2SLoginRes>(Arena*);
template<> ::C2S::C2SLoginZoneReq* Arena::CreateMaybeMessage<::C2S::C2SLoginZoneReq>(Arena*);
template<> ::C2S::C2SLoginZoneRes* Arena::CreateMaybeMessage<::C2S::C2SLoginZoneRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace C2S {

enum C2S_MSG_ID : int {
  MSG_ID_NONE = 0,
  MSG_ID_HEARTBEAT = 10001,
  MSG_ID_LOGIN_REQ = 10002,
  MSG_ID_LOGIN_RES = 10003,
  MSG_ID_LOGIN_ZONE_REQ = 10004,
  MSG_ID_LOGIN_ZONE_RES = 10005,
  C2S_MSG_ID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  C2S_MSG_ID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool C2S_MSG_ID_IsValid(int value);
constexpr C2S_MSG_ID C2S_MSG_ID_MIN = MSG_ID_NONE;
constexpr C2S_MSG_ID C2S_MSG_ID_MAX = MSG_ID_LOGIN_ZONE_RES;
constexpr int C2S_MSG_ID_ARRAYSIZE = C2S_MSG_ID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* C2S_MSG_ID_descriptor();
template<typename T>
inline const std::string& C2S_MSG_ID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, C2S_MSG_ID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function C2S_MSG_ID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    C2S_MSG_ID_descriptor(), enum_t_value);
}
inline bool C2S_MSG_ID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, C2S_MSG_ID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<C2S_MSG_ID>(
    C2S_MSG_ID_descriptor(), name, value);
}
enum C2S_ERROR_CODE : int {
  EC_SUCCESS = 0,
  EC_GENERRAL_ERROR = 101,
  EC_SERVER_INTERNAL_ERROR = 102,
  EC_SERVER_NOT_READY = 103,
  EC_INVALID_PARAMETER = 104,
  EC_SERVER_BUSY = 105,
  C2S_ERROR_CODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  C2S_ERROR_CODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool C2S_ERROR_CODE_IsValid(int value);
constexpr C2S_ERROR_CODE C2S_ERROR_CODE_MIN = EC_SUCCESS;
constexpr C2S_ERROR_CODE C2S_ERROR_CODE_MAX = EC_SERVER_BUSY;
constexpr int C2S_ERROR_CODE_ARRAYSIZE = C2S_ERROR_CODE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* C2S_ERROR_CODE_descriptor();
template<typename T>
inline const std::string& C2S_ERROR_CODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, C2S_ERROR_CODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function C2S_ERROR_CODE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    C2S_ERROR_CODE_descriptor(), enum_t_value);
}
inline bool C2S_ERROR_CODE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, C2S_ERROR_CODE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<C2S_ERROR_CODE>(
    C2S_ERROR_CODE_descriptor(), name, value);
}
// ===================================================================

class C2SHeartBeat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:C2S.C2SHeartBeat) */ {
 public:
  inline C2SHeartBeat() : C2SHeartBeat(nullptr) {}
  ~C2SHeartBeat() override;
  explicit PROTOBUF_CONSTEXPR C2SHeartBeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2SHeartBeat(const C2SHeartBeat& from);
  C2SHeartBeat(C2SHeartBeat&& from) noexcept
    : C2SHeartBeat() {
    *this = ::std::move(from);
  }

  inline C2SHeartBeat& operator=(const C2SHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SHeartBeat& operator=(C2SHeartBeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2SHeartBeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2SHeartBeat* internal_default_instance() {
    return reinterpret_cast<const C2SHeartBeat*>(
               &_C2SHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C2SHeartBeat& a, C2SHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SHeartBeat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2SHeartBeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2SHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2SHeartBeat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2SHeartBeat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2SHeartBeat& from) {
    C2SHeartBeat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SHeartBeat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "C2S.C2SHeartBeat";
  }
  protected:
  explicit C2SHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:C2S.C2SHeartBeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_c2s_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class C2SLoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:C2S.C2SLoginReq) */ {
 public:
  inline C2SLoginReq() : C2SLoginReq(nullptr) {}
  ~C2SLoginReq() override;
  explicit PROTOBUF_CONSTEXPR C2SLoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2SLoginReq(const C2SLoginReq& from);
  C2SLoginReq(C2SLoginReq&& from) noexcept
    : C2SLoginReq() {
    *this = ::std::move(from);
  }

  inline C2SLoginReq& operator=(const C2SLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SLoginReq& operator=(C2SLoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2SLoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2SLoginReq* internal_default_instance() {
    return reinterpret_cast<const C2SLoginReq*>(
               &_C2SLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C2SLoginReq& a, C2SLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SLoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2SLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2SLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2SLoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2SLoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2SLoginReq& from) {
    C2SLoginReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SLoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "C2S.C2SLoginReq";
  }
  protected:
  explicit C2SLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSdkUserIdFieldNumber = 1,
    kSdkTokenFieldNumber = 2,
    kChannelIdFieldNumber = 3,
  };
  // string sdk_user_id = 1;
  void clear_sdk_user_id();
  const std::string& sdk_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdk_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdk_user_id();
  PROTOBUF_NODISCARD std::string* release_sdk_user_id();
  void set_allocated_sdk_user_id(std::string* sdk_user_id);
  private:
  const std::string& _internal_sdk_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdk_user_id(const std::string& value);
  std::string* _internal_mutable_sdk_user_id();
  public:

  // string sdk_token = 2;
  void clear_sdk_token();
  const std::string& sdk_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdk_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdk_token();
  PROTOBUF_NODISCARD std::string* release_sdk_token();
  void set_allocated_sdk_token(std::string* sdk_token);
  private:
  const std::string& _internal_sdk_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdk_token(const std::string& value);
  std::string* _internal_mutable_sdk_token();
  public:

  // int32 channel_id = 3;
  void clear_channel_id();
  int32_t channel_id() const;
  void set_channel_id(int32_t value);
  private:
  int32_t _internal_channel_id() const;
  void _internal_set_channel_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:C2S.C2SLoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdk_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdk_token_;
    int32_t channel_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_c2s_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class C2SLoginRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:C2S.C2SLoginRes) */ {
 public:
  inline C2SLoginRes() : C2SLoginRes(nullptr) {}
  ~C2SLoginRes() override;
  explicit PROTOBUF_CONSTEXPR C2SLoginRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2SLoginRes(const C2SLoginRes& from);
  C2SLoginRes(C2SLoginRes&& from) noexcept
    : C2SLoginRes() {
    *this = ::std::move(from);
  }

  inline C2SLoginRes& operator=(const C2SLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SLoginRes& operator=(C2SLoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2SLoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2SLoginRes* internal_default_instance() {
    return reinterpret_cast<const C2SLoginRes*>(
               &_C2SLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C2SLoginRes& a, C2SLoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SLoginRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2SLoginRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2SLoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2SLoginRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2SLoginRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2SLoginRes& from) {
    C2SLoginRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SLoginRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "C2S.C2SLoginRes";
  }
  protected:
  explicit C2SLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZoneTokenFieldNumber = 2,
    kIpFieldNumber = 3,
    kProfileIdFieldNumber = 5,
    kErrorCodeFieldNumber = 1,
    kPortFieldNumber = 4,
  };
  // string zone_token = 2;
  void clear_zone_token();
  const std::string& zone_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zone_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zone_token();
  PROTOBUF_NODISCARD std::string* release_zone_token();
  void set_allocated_zone_token(std::string* zone_token);
  private:
  const std::string& _internal_zone_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone_token(const std::string& value);
  std::string* _internal_mutable_zone_token();
  public:

  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string profile_id = 5;
  void clear_profile_id();
  const std::string& profile_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_profile_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_profile_id();
  PROTOBUF_NODISCARD std::string* release_profile_id();
  void set_allocated_profile_id(std::string* profile_id);
  private:
  const std::string& _internal_profile_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile_id(const std::string& value);
  std::string* _internal_mutable_profile_id();
  public:

  // int32 error_code = 1;
  void clear_error_code();
  int32_t error_code() const;
  void set_error_code(int32_t value);
  private:
  int32_t _internal_error_code() const;
  void _internal_set_error_code(int32_t value);
  public:

  // int32 port = 4;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:C2S.C2SLoginRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_id_;
    int32_t error_code_;
    int32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_c2s_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class C2SLoginZoneReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:C2S.C2SLoginZoneReq) */ {
 public:
  inline C2SLoginZoneReq() : C2SLoginZoneReq(nullptr) {}
  ~C2SLoginZoneReq() override;
  explicit PROTOBUF_CONSTEXPR C2SLoginZoneReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2SLoginZoneReq(const C2SLoginZoneReq& from);
  C2SLoginZoneReq(C2SLoginZoneReq&& from) noexcept
    : C2SLoginZoneReq() {
    *this = ::std::move(from);
  }

  inline C2SLoginZoneReq& operator=(const C2SLoginZoneReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SLoginZoneReq& operator=(C2SLoginZoneReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2SLoginZoneReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2SLoginZoneReq* internal_default_instance() {
    return reinterpret_cast<const C2SLoginZoneReq*>(
               &_C2SLoginZoneReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C2SLoginZoneReq& a, C2SLoginZoneReq& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SLoginZoneReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2SLoginZoneReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2SLoginZoneReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2SLoginZoneReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2SLoginZoneReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2SLoginZoneReq& from) {
    C2SLoginZoneReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SLoginZoneReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "C2S.C2SLoginZoneReq";
  }
  protected:
  explicit C2SLoginZoneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kZoneTokenFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string zone_token = 2;
  void clear_zone_token();
  const std::string& zone_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zone_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zone_token();
  PROTOBUF_NODISCARD std::string* release_zone_token();
  void set_allocated_zone_token(std::string* zone_token);
  private:
  const std::string& _internal_zone_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone_token(const std::string& value);
  std::string* _internal_mutable_zone_token();
  public:

  // @@protoc_insertion_point(class_scope:C2S.C2SLoginZoneReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_c2s_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class C2SLoginZoneRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:C2S.C2SLoginZoneRes) */ {
 public:
  inline C2SLoginZoneRes() : C2SLoginZoneRes(nullptr) {}
  ~C2SLoginZoneRes() override;
  explicit PROTOBUF_CONSTEXPR C2SLoginZoneRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2SLoginZoneRes(const C2SLoginZoneRes& from);
  C2SLoginZoneRes(C2SLoginZoneRes&& from) noexcept
    : C2SLoginZoneRes() {
    *this = ::std::move(from);
  }

  inline C2SLoginZoneRes& operator=(const C2SLoginZoneRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SLoginZoneRes& operator=(C2SLoginZoneRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2SLoginZoneRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2SLoginZoneRes* internal_default_instance() {
    return reinterpret_cast<const C2SLoginZoneRes*>(
               &_C2SLoginZoneRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C2SLoginZoneRes& a, C2SLoginZoneRes& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SLoginZoneRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2SLoginZoneRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2SLoginZoneRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2SLoginZoneRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2SLoginZoneRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2SLoginZoneRes& from) {
    C2SLoginZoneRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SLoginZoneRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "C2S.C2SLoginZoneRes";
  }
  protected:
  explicit C2SLoginZoneRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
  };
  // .C2S.C2S_ERROR_CODE error_code = 1;
  void clear_error_code();
  ::C2S::C2S_ERROR_CODE error_code() const;
  void set_error_code(::C2S::C2S_ERROR_CODE value);
  private:
  ::C2S::C2S_ERROR_CODE _internal_error_code() const;
  void _internal_set_error_code(::C2S::C2S_ERROR_CODE value);
  public:

  // @@protoc_insertion_point(class_scope:C2S.C2SLoginZoneRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_c2s_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C2SHeartBeat

// int32 state = 1;
inline void C2SHeartBeat::clear_state() {
  _impl_.state_ = 0;
}
inline int32_t C2SHeartBeat::_internal_state() const {
  return _impl_.state_;
}
inline int32_t C2SHeartBeat::state() const {
  // @@protoc_insertion_point(field_get:C2S.C2SHeartBeat.state)
  return _internal_state();
}
inline void C2SHeartBeat::_internal_set_state(int32_t value) {
  
  _impl_.state_ = value;
}
inline void C2SHeartBeat::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:C2S.C2SHeartBeat.state)
}

// -------------------------------------------------------------------

// C2SLoginReq

// string sdk_user_id = 1;
inline void C2SLoginReq::clear_sdk_user_id() {
  _impl_.sdk_user_id_.ClearToEmpty();
}
inline const std::string& C2SLoginReq::sdk_user_id() const {
  // @@protoc_insertion_point(field_get:C2S.C2SLoginReq.sdk_user_id)
  return _internal_sdk_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2SLoginReq::set_sdk_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sdk_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:C2S.C2SLoginReq.sdk_user_id)
}
inline std::string* C2SLoginReq::mutable_sdk_user_id() {
  std::string* _s = _internal_mutable_sdk_user_id();
  // @@protoc_insertion_point(field_mutable:C2S.C2SLoginReq.sdk_user_id)
  return _s;
}
inline const std::string& C2SLoginReq::_internal_sdk_user_id() const {
  return _impl_.sdk_user_id_.Get();
}
inline void C2SLoginReq::_internal_set_sdk_user_id(const std::string& value) {
  
  _impl_.sdk_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* C2SLoginReq::_internal_mutable_sdk_user_id() {
  
  return _impl_.sdk_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* C2SLoginReq::release_sdk_user_id() {
  // @@protoc_insertion_point(field_release:C2S.C2SLoginReq.sdk_user_id)
  return _impl_.sdk_user_id_.Release();
}
inline void C2SLoginReq::set_allocated_sdk_user_id(std::string* sdk_user_id) {
  if (sdk_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.sdk_user_id_.SetAllocated(sdk_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sdk_user_id_.IsDefault()) {
    _impl_.sdk_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:C2S.C2SLoginReq.sdk_user_id)
}

// string sdk_token = 2;
inline void C2SLoginReq::clear_sdk_token() {
  _impl_.sdk_token_.ClearToEmpty();
}
inline const std::string& C2SLoginReq::sdk_token() const {
  // @@protoc_insertion_point(field_get:C2S.C2SLoginReq.sdk_token)
  return _internal_sdk_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2SLoginReq::set_sdk_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sdk_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:C2S.C2SLoginReq.sdk_token)
}
inline std::string* C2SLoginReq::mutable_sdk_token() {
  std::string* _s = _internal_mutable_sdk_token();
  // @@protoc_insertion_point(field_mutable:C2S.C2SLoginReq.sdk_token)
  return _s;
}
inline const std::string& C2SLoginReq::_internal_sdk_token() const {
  return _impl_.sdk_token_.Get();
}
inline void C2SLoginReq::_internal_set_sdk_token(const std::string& value) {
  
  _impl_.sdk_token_.Set(value, GetArenaForAllocation());
}
inline std::string* C2SLoginReq::_internal_mutable_sdk_token() {
  
  return _impl_.sdk_token_.Mutable(GetArenaForAllocation());
}
inline std::string* C2SLoginReq::release_sdk_token() {
  // @@protoc_insertion_point(field_release:C2S.C2SLoginReq.sdk_token)
  return _impl_.sdk_token_.Release();
}
inline void C2SLoginReq::set_allocated_sdk_token(std::string* sdk_token) {
  if (sdk_token != nullptr) {
    
  } else {
    
  }
  _impl_.sdk_token_.SetAllocated(sdk_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sdk_token_.IsDefault()) {
    _impl_.sdk_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:C2S.C2SLoginReq.sdk_token)
}

// int32 channel_id = 3;
inline void C2SLoginReq::clear_channel_id() {
  _impl_.channel_id_ = 0;
}
inline int32_t C2SLoginReq::_internal_channel_id() const {
  return _impl_.channel_id_;
}
inline int32_t C2SLoginReq::channel_id() const {
  // @@protoc_insertion_point(field_get:C2S.C2SLoginReq.channel_id)
  return _internal_channel_id();
}
inline void C2SLoginReq::_internal_set_channel_id(int32_t value) {
  
  _impl_.channel_id_ = value;
}
inline void C2SLoginReq::set_channel_id(int32_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:C2S.C2SLoginReq.channel_id)
}

// -------------------------------------------------------------------

// C2SLoginRes

// int32 error_code = 1;
inline void C2SLoginRes::clear_error_code() {
  _impl_.error_code_ = 0;
}
inline int32_t C2SLoginRes::_internal_error_code() const {
  return _impl_.error_code_;
}
inline int32_t C2SLoginRes::error_code() const {
  // @@protoc_insertion_point(field_get:C2S.C2SLoginRes.error_code)
  return _internal_error_code();
}
inline void C2SLoginRes::_internal_set_error_code(int32_t value) {
  
  _impl_.error_code_ = value;
}
inline void C2SLoginRes::set_error_code(int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:C2S.C2SLoginRes.error_code)
}

// string zone_token = 2;
inline void C2SLoginRes::clear_zone_token() {
  _impl_.zone_token_.ClearToEmpty();
}
inline const std::string& C2SLoginRes::zone_token() const {
  // @@protoc_insertion_point(field_get:C2S.C2SLoginRes.zone_token)
  return _internal_zone_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2SLoginRes::set_zone_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.zone_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:C2S.C2SLoginRes.zone_token)
}
inline std::string* C2SLoginRes::mutable_zone_token() {
  std::string* _s = _internal_mutable_zone_token();
  // @@protoc_insertion_point(field_mutable:C2S.C2SLoginRes.zone_token)
  return _s;
}
inline const std::string& C2SLoginRes::_internal_zone_token() const {
  return _impl_.zone_token_.Get();
}
inline void C2SLoginRes::_internal_set_zone_token(const std::string& value) {
  
  _impl_.zone_token_.Set(value, GetArenaForAllocation());
}
inline std::string* C2SLoginRes::_internal_mutable_zone_token() {
  
  return _impl_.zone_token_.Mutable(GetArenaForAllocation());
}
inline std::string* C2SLoginRes::release_zone_token() {
  // @@protoc_insertion_point(field_release:C2S.C2SLoginRes.zone_token)
  return _impl_.zone_token_.Release();
}
inline void C2SLoginRes::set_allocated_zone_token(std::string* zone_token) {
  if (zone_token != nullptr) {
    
  } else {
    
  }
  _impl_.zone_token_.SetAllocated(zone_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zone_token_.IsDefault()) {
    _impl_.zone_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:C2S.C2SLoginRes.zone_token)
}

// string ip = 3;
inline void C2SLoginRes::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& C2SLoginRes::ip() const {
  // @@protoc_insertion_point(field_get:C2S.C2SLoginRes.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2SLoginRes::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:C2S.C2SLoginRes.ip)
}
inline std::string* C2SLoginRes::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:C2S.C2SLoginRes.ip)
  return _s;
}
inline const std::string& C2SLoginRes::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void C2SLoginRes::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* C2SLoginRes::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* C2SLoginRes::release_ip() {
  // @@protoc_insertion_point(field_release:C2S.C2SLoginRes.ip)
  return _impl_.ip_.Release();
}
inline void C2SLoginRes::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:C2S.C2SLoginRes.ip)
}

// int32 port = 4;
inline void C2SLoginRes::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t C2SLoginRes::_internal_port() const {
  return _impl_.port_;
}
inline int32_t C2SLoginRes::port() const {
  // @@protoc_insertion_point(field_get:C2S.C2SLoginRes.port)
  return _internal_port();
}
inline void C2SLoginRes::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void C2SLoginRes::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:C2S.C2SLoginRes.port)
}

// string profile_id = 5;
inline void C2SLoginRes::clear_profile_id() {
  _impl_.profile_id_.ClearToEmpty();
}
inline const std::string& C2SLoginRes::profile_id() const {
  // @@protoc_insertion_point(field_get:C2S.C2SLoginRes.profile_id)
  return _internal_profile_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2SLoginRes::set_profile_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.profile_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:C2S.C2SLoginRes.profile_id)
}
inline std::string* C2SLoginRes::mutable_profile_id() {
  std::string* _s = _internal_mutable_profile_id();
  // @@protoc_insertion_point(field_mutable:C2S.C2SLoginRes.profile_id)
  return _s;
}
inline const std::string& C2SLoginRes::_internal_profile_id() const {
  return _impl_.profile_id_.Get();
}
inline void C2SLoginRes::_internal_set_profile_id(const std::string& value) {
  
  _impl_.profile_id_.Set(value, GetArenaForAllocation());
}
inline std::string* C2SLoginRes::_internal_mutable_profile_id() {
  
  return _impl_.profile_id_.Mutable(GetArenaForAllocation());
}
inline std::string* C2SLoginRes::release_profile_id() {
  // @@protoc_insertion_point(field_release:C2S.C2SLoginRes.profile_id)
  return _impl_.profile_id_.Release();
}
inline void C2SLoginRes::set_allocated_profile_id(std::string* profile_id) {
  if (profile_id != nullptr) {
    
  } else {
    
  }
  _impl_.profile_id_.SetAllocated(profile_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.profile_id_.IsDefault()) {
    _impl_.profile_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:C2S.C2SLoginRes.profile_id)
}

// -------------------------------------------------------------------

// C2SLoginZoneReq

// string user_id = 1;
inline void C2SLoginZoneReq::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& C2SLoginZoneReq::user_id() const {
  // @@protoc_insertion_point(field_get:C2S.C2SLoginZoneReq.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2SLoginZoneReq::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:C2S.C2SLoginZoneReq.user_id)
}
inline std::string* C2SLoginZoneReq::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:C2S.C2SLoginZoneReq.user_id)
  return _s;
}
inline const std::string& C2SLoginZoneReq::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void C2SLoginZoneReq::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* C2SLoginZoneReq::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* C2SLoginZoneReq::release_user_id() {
  // @@protoc_insertion_point(field_release:C2S.C2SLoginZoneReq.user_id)
  return _impl_.user_id_.Release();
}
inline void C2SLoginZoneReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:C2S.C2SLoginZoneReq.user_id)
}

// string zone_token = 2;
inline void C2SLoginZoneReq::clear_zone_token() {
  _impl_.zone_token_.ClearToEmpty();
}
inline const std::string& C2SLoginZoneReq::zone_token() const {
  // @@protoc_insertion_point(field_get:C2S.C2SLoginZoneReq.zone_token)
  return _internal_zone_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2SLoginZoneReq::set_zone_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.zone_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:C2S.C2SLoginZoneReq.zone_token)
}
inline std::string* C2SLoginZoneReq::mutable_zone_token() {
  std::string* _s = _internal_mutable_zone_token();
  // @@protoc_insertion_point(field_mutable:C2S.C2SLoginZoneReq.zone_token)
  return _s;
}
inline const std::string& C2SLoginZoneReq::_internal_zone_token() const {
  return _impl_.zone_token_.Get();
}
inline void C2SLoginZoneReq::_internal_set_zone_token(const std::string& value) {
  
  _impl_.zone_token_.Set(value, GetArenaForAllocation());
}
inline std::string* C2SLoginZoneReq::_internal_mutable_zone_token() {
  
  return _impl_.zone_token_.Mutable(GetArenaForAllocation());
}
inline std::string* C2SLoginZoneReq::release_zone_token() {
  // @@protoc_insertion_point(field_release:C2S.C2SLoginZoneReq.zone_token)
  return _impl_.zone_token_.Release();
}
inline void C2SLoginZoneReq::set_allocated_zone_token(std::string* zone_token) {
  if (zone_token != nullptr) {
    
  } else {
    
  }
  _impl_.zone_token_.SetAllocated(zone_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zone_token_.IsDefault()) {
    _impl_.zone_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:C2S.C2SLoginZoneReq.zone_token)
}

// -------------------------------------------------------------------

// C2SLoginZoneRes

// .C2S.C2S_ERROR_CODE error_code = 1;
inline void C2SLoginZoneRes::clear_error_code() {
  _impl_.error_code_ = 0;
}
inline ::C2S::C2S_ERROR_CODE C2SLoginZoneRes::_internal_error_code() const {
  return static_cast< ::C2S::C2S_ERROR_CODE >(_impl_.error_code_);
}
inline ::C2S::C2S_ERROR_CODE C2SLoginZoneRes::error_code() const {
  // @@protoc_insertion_point(field_get:C2S.C2SLoginZoneRes.error_code)
  return _internal_error_code();
}
inline void C2SLoginZoneRes::_internal_set_error_code(::C2S::C2S_ERROR_CODE value) {
  
  _impl_.error_code_ = value;
}
inline void C2SLoginZoneRes::set_error_code(::C2S::C2S_ERROR_CODE value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:C2S.C2SLoginZoneRes.error_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace C2S

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::C2S::C2S_MSG_ID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::C2S::C2S_MSG_ID>() {
  return ::C2S::C2S_MSG_ID_descriptor();
}
template <> struct is_proto_enum< ::C2S::C2S_ERROR_CODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::C2S::C2S_ERROR_CODE>() {
  return ::C2S::C2S_ERROR_CODE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_c2s_5fcommon_2eproto
