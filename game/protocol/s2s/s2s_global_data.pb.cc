// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2s_global_data.proto

#include "s2s_global_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace S2S {
PROTOBUF_CONSTEXPR S2SPlayerSessionData::S2SPlayerSessionData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sdk_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sdk_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profile_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.login_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channel_id_)*/0
  , /*decltype(_impl_.online_status_)*/0
  , /*decltype(_impl_.login_time_)*/int64_t{0}
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2SPlayerSessionDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2SPlayerSessionDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2SPlayerSessionDataDefaultTypeInternal() {}
  union {
    S2SPlayerSessionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2SPlayerSessionDataDefaultTypeInternal _S2SPlayerSessionData_default_instance_;
PROTOBUF_CONSTEXPR S2SZoneServerData::S2SZoneServerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.online_players_)*/0
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2SZoneServerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2SZoneServerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2SZoneServerDataDefaultTypeInternal() {}
  union {
    S2SZoneServerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2SZoneServerDataDefaultTypeInternal _S2SZoneServerData_default_instance_;
}  // namespace S2S
static ::_pb::Metadata file_level_metadata_s2s_5fglobal_5fdata_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_s2s_5fglobal_5fdata_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_s2s_5fglobal_5fdata_2eproto = nullptr;

const uint32_t TableStruct_s2s_5fglobal_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::S2S::S2SPlayerSessionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::S2S::S2SPlayerSessionData, _impl_.sdk_user_id_),
  PROTOBUF_FIELD_OFFSET(::S2S::S2SPlayerSessionData, _impl_.sdk_token_),
  PROTOBUF_FIELD_OFFSET(::S2S::S2SPlayerSessionData, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::S2S::S2SPlayerSessionData, _impl_.profile_id_),
  PROTOBUF_FIELD_OFFSET(::S2S::S2SPlayerSessionData, _impl_.online_status_),
  PROTOBUF_FIELD_OFFSET(::S2S::S2SPlayerSessionData, _impl_.login_time_),
  PROTOBUF_FIELD_OFFSET(::S2S::S2SPlayerSessionData, _impl_.login_token_),
  PROTOBUF_FIELD_OFFSET(::S2S::S2SPlayerSessionData, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::S2S::S2SPlayerSessionData, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::S2S::S2SPlayerSessionData, _impl_.port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::S2S::S2SZoneServerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::S2S::S2SZoneServerData, _impl_.online_players_),
  PROTOBUF_FIELD_OFFSET(::S2S::S2SZoneServerData, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::S2S::S2SZoneServerData, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::S2S::S2SZoneServerData, _impl_.ip_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::S2S::S2SPlayerSessionData)},
  { 16, -1, -1, sizeof(::S2S::S2SZoneServerData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::S2S::_S2SPlayerSessionData_default_instance_._instance,
  &::S2S::_S2SZoneServerData_default_instance_._instance,
};

const char descriptor_table_protodef_s2s_5fglobal_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025s2s_global_data.proto\022\003S2S\"\350\001\n\024S2SPlay"
  "erSessionData\022\023\n\013sdk_user_id\030\001 \001(\t\022\021\n\tsd"
  "k_token\030\002 \001(\t\022\022\n\nchannel_id\030\003 \001(\005\022\022\n\npro"
  "file_id\030\004 \001(\t\022-\n\ronline_status\030\005 \001(\0162\026.S"
  "2S.S2S_ONLINE_STATUS\022\022\n\nlogin_time\030\006 \001(\003"
  "\022\023\n\013login_token\030\007 \001(\t\022\016\n\006app_id\030\010 \001(\t\022\n\n"
  "\002ip\030\t \001(\t\022\014\n\004port\030\n \001(\005\"U\n\021S2SZoneServer"
  "Data\022\026\n\016online_players\030\001 \001(\005\022\016\n\006app_id\030\002"
  " \001(\t\022\014\n\004port\030\003 \001(\005\022\n\n\002ip\030\004 \001(\t*\204\001\n\021S2S_O"
  "NLINE_STATUS\022\010\n\004NONE\020\000\022\034\n\030PROGRESS_ON_LO"
  "GIN_SERVER\020\001\022\032\n\026WAITTING_TO_LOGIN_ZONE\020\002"
  "\022\n\n\006ONLINE\020\003\022\022\n\016DISCONNTECTING\020\004\022\013\n\007OFFL"
  "INE\020\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_s2s_5fglobal_5fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_s2s_5fglobal_5fdata_2eproto = {
    false, false, 493, descriptor_table_protodef_s2s_5fglobal_5fdata_2eproto,
    "s2s_global_data.proto",
    &descriptor_table_s2s_5fglobal_5fdata_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_s2s_5fglobal_5fdata_2eproto::offsets,
    file_level_metadata_s2s_5fglobal_5fdata_2eproto, file_level_enum_descriptors_s2s_5fglobal_5fdata_2eproto,
    file_level_service_descriptors_s2s_5fglobal_5fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_s2s_5fglobal_5fdata_2eproto_getter() {
  return &descriptor_table_s2s_5fglobal_5fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_s2s_5fglobal_5fdata_2eproto(&descriptor_table_s2s_5fglobal_5fdata_2eproto);
namespace S2S {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* S2S_ONLINE_STATUS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2s_5fglobal_5fdata_2eproto);
  return file_level_enum_descriptors_s2s_5fglobal_5fdata_2eproto[0];
}
bool S2S_ONLINE_STATUS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class S2SPlayerSessionData::_Internal {
 public:
};

S2SPlayerSessionData::S2SPlayerSessionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:S2S.S2SPlayerSessionData)
}
S2SPlayerSessionData::S2SPlayerSessionData(const S2SPlayerSessionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2SPlayerSessionData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sdk_user_id_){}
    , decltype(_impl_.sdk_token_){}
    , decltype(_impl_.profile_id_){}
    , decltype(_impl_.login_token_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.online_status_){}
    , decltype(_impl_.login_time_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sdk_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdk_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdk_user_id().empty()) {
    _this->_impl_.sdk_user_id_.Set(from._internal_sdk_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sdk_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdk_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdk_token().empty()) {
    _this->_impl_.sdk_token_.Set(from._internal_sdk_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.profile_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profile_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profile_id().empty()) {
    _this->_impl_.profile_id_.Set(from._internal_profile_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.login_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login_token().empty()) {
    _this->_impl_.login_token_.Set(from._internal_login_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.channel_id_, &from._impl_.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.port_) -
    reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.port_));
  // @@protoc_insertion_point(copy_constructor:S2S.S2SPlayerSessionData)
}

inline void S2SPlayerSessionData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sdk_user_id_){}
    , decltype(_impl_.sdk_token_){}
    , decltype(_impl_.profile_id_){}
    , decltype(_impl_.login_token_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.channel_id_){0}
    , decltype(_impl_.online_status_){0}
    , decltype(_impl_.login_time_){int64_t{0}}
    , decltype(_impl_.port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sdk_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdk_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdk_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdk_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profile_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profile_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.login_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S2SPlayerSessionData::~S2SPlayerSessionData() {
  // @@protoc_insertion_point(destructor:S2S.S2SPlayerSessionData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2SPlayerSessionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sdk_user_id_.Destroy();
  _impl_.sdk_token_.Destroy();
  _impl_.profile_id_.Destroy();
  _impl_.login_token_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.ip_.Destroy();
}

void S2SPlayerSessionData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2SPlayerSessionData::Clear() {
// @@protoc_insertion_point(message_clear_start:S2S.S2SPlayerSessionData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sdk_user_id_.ClearToEmpty();
  _impl_.sdk_token_.ClearToEmpty();
  _impl_.profile_id_.ClearToEmpty();
  _impl_.login_token_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  ::memset(&_impl_.channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.port_) -
      reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2SPlayerSessionData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sdk_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sdk_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "S2S.S2SPlayerSessionData.sdk_user_id"));
        } else
          goto handle_unusual;
        continue;
      // string sdk_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sdk_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "S2S.S2SPlayerSessionData.sdk_token"));
        } else
          goto handle_unusual;
        continue;
      // int32 channel_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string profile_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_profile_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "S2S.S2SPlayerSessionData.profile_id"));
        } else
          goto handle_unusual;
        continue;
      // .S2S.S2S_ONLINE_STATUS online_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_online_status(static_cast<::S2S::S2S_ONLINE_STATUS>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 login_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.login_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string login_token = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_login_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "S2S.S2SPlayerSessionData.login_token"));
        } else
          goto handle_unusual;
        continue;
      // string app_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "S2S.S2SPlayerSessionData.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string ip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "S2S.S2SPlayerSessionData.ip"));
        } else
          goto handle_unusual;
        continue;
      // int32 port = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2SPlayerSessionData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:S2S.S2SPlayerSessionData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sdk_user_id = 1;
  if (!this->_internal_sdk_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdk_user_id().data(), static_cast<int>(this->_internal_sdk_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "S2S.S2SPlayerSessionData.sdk_user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sdk_user_id(), target);
  }

  // string sdk_token = 2;
  if (!this->_internal_sdk_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdk_token().data(), static_cast<int>(this->_internal_sdk_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "S2S.S2SPlayerSessionData.sdk_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sdk_token(), target);
  }

  // int32 channel_id = 3;
  if (this->_internal_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel_id(), target);
  }

  // string profile_id = 4;
  if (!this->_internal_profile_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profile_id().data(), static_cast<int>(this->_internal_profile_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "S2S.S2SPlayerSessionData.profile_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_profile_id(), target);
  }

  // .S2S.S2S_ONLINE_STATUS online_status = 5;
  if (this->_internal_online_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_online_status(), target);
  }

  // int64 login_time = 6;
  if (this->_internal_login_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_login_time(), target);
  }

  // string login_token = 7;
  if (!this->_internal_login_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login_token().data(), static_cast<int>(this->_internal_login_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "S2S.S2SPlayerSessionData.login_token");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_login_token(), target);
  }

  // string app_id = 8;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "S2S.S2SPlayerSessionData.app_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_app_id(), target);
  }

  // string ip = 9;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "S2S.S2SPlayerSessionData.ip");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_ip(), target);
  }

  // int32 port = 10;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:S2S.S2SPlayerSessionData)
  return target;
}

size_t S2SPlayerSessionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:S2S.S2SPlayerSessionData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sdk_user_id = 1;
  if (!this->_internal_sdk_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdk_user_id());
  }

  // string sdk_token = 2;
  if (!this->_internal_sdk_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdk_token());
  }

  // string profile_id = 4;
  if (!this->_internal_profile_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profile_id());
  }

  // string login_token = 7;
  if (!this->_internal_login_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login_token());
  }

  // string app_id = 8;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string ip = 9;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 channel_id = 3;
  if (this->_internal_channel_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel_id());
  }

  // .S2S.S2S_ONLINE_STATUS online_status = 5;
  if (this->_internal_online_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_online_status());
  }

  // int64 login_time = 6;
  if (this->_internal_login_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_login_time());
  }

  // int32 port = 10;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2SPlayerSessionData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2SPlayerSessionData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2SPlayerSessionData::GetClassData() const { return &_class_data_; }


void S2SPlayerSessionData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2SPlayerSessionData*>(&to_msg);
  auto& from = static_cast<const S2SPlayerSessionData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:S2S.S2SPlayerSessionData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sdk_user_id().empty()) {
    _this->_internal_set_sdk_user_id(from._internal_sdk_user_id());
  }
  if (!from._internal_sdk_token().empty()) {
    _this->_internal_set_sdk_token(from._internal_sdk_token());
  }
  if (!from._internal_profile_id().empty()) {
    _this->_internal_set_profile_id(from._internal_profile_id());
  }
  if (!from._internal_login_token().empty()) {
    _this->_internal_set_login_token(from._internal_login_token());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_channel_id() != 0) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (from._internal_online_status() != 0) {
    _this->_internal_set_online_status(from._internal_online_status());
  }
  if (from._internal_login_time() != 0) {
    _this->_internal_set_login_time(from._internal_login_time());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2SPlayerSessionData::CopyFrom(const S2SPlayerSessionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:S2S.S2SPlayerSessionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerSessionData::IsInitialized() const {
  return true;
}

void S2SPlayerSessionData::InternalSwap(S2SPlayerSessionData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdk_user_id_, lhs_arena,
      &other->_impl_.sdk_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdk_token_, lhs_arena,
      &other->_impl_.sdk_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profile_id_, lhs_arena,
      &other->_impl_.profile_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_token_, lhs_arena,
      &other->_impl_.login_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2SPlayerSessionData, _impl_.port_)
      + sizeof(S2SPlayerSessionData::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(S2SPlayerSessionData, _impl_.channel_id_)>(
          reinterpret_cast<char*>(&_impl_.channel_id_),
          reinterpret_cast<char*>(&other->_impl_.channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2SPlayerSessionData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2s_5fglobal_5fdata_2eproto_getter, &descriptor_table_s2s_5fglobal_5fdata_2eproto_once,
      file_level_metadata_s2s_5fglobal_5fdata_2eproto[0]);
}

// ===================================================================

class S2SZoneServerData::_Internal {
 public:
};

S2SZoneServerData::S2SZoneServerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:S2S.S2SZoneServerData)
}
S2SZoneServerData::S2SZoneServerData(const S2SZoneServerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2SZoneServerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.online_players_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.online_players_, &from._impl_.online_players_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.port_) -
    reinterpret_cast<char*>(&_impl_.online_players_)) + sizeof(_impl_.port_));
  // @@protoc_insertion_point(copy_constructor:S2S.S2SZoneServerData)
}

inline void S2SZoneServerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.online_players_){0}
    , decltype(_impl_.port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S2SZoneServerData::~S2SZoneServerData() {
  // @@protoc_insertion_point(destructor:S2S.S2SZoneServerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2SZoneServerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_id_.Destroy();
  _impl_.ip_.Destroy();
}

void S2SZoneServerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2SZoneServerData::Clear() {
// @@protoc_insertion_point(message_clear_start:S2S.S2SZoneServerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_id_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  ::memset(&_impl_.online_players_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.port_) -
      reinterpret_cast<char*>(&_impl_.online_players_)) + sizeof(_impl_.port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2SZoneServerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 online_players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.online_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "S2S.S2SZoneServerData.app_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "S2S.S2SZoneServerData.ip"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2SZoneServerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:S2S.S2SZoneServerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 online_players = 1;
  if (this->_internal_online_players() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_online_players(), target);
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "S2S.S2SZoneServerData.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  // string ip = 4;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "S2S.S2SZoneServerData.ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:S2S.S2SZoneServerData)
  return target;
}

size_t S2SZoneServerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:S2S.S2SZoneServerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string ip = 4;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 online_players = 1;
  if (this->_internal_online_players() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_online_players());
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2SZoneServerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2SZoneServerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2SZoneServerData::GetClassData() const { return &_class_data_; }


void S2SZoneServerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2SZoneServerData*>(&to_msg);
  auto& from = static_cast<const S2SZoneServerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:S2S.S2SZoneServerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_online_players() != 0) {
    _this->_internal_set_online_players(from._internal_online_players());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2SZoneServerData::CopyFrom(const S2SZoneServerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:S2S.S2SZoneServerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SZoneServerData::IsInitialized() const {
  return true;
}

void S2SZoneServerData::InternalSwap(S2SZoneServerData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2SZoneServerData, _impl_.port_)
      + sizeof(S2SZoneServerData::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(S2SZoneServerData, _impl_.online_players_)>(
          reinterpret_cast<char*>(&_impl_.online_players_),
          reinterpret_cast<char*>(&other->_impl_.online_players_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2SZoneServerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2s_5fglobal_5fdata_2eproto_getter, &descriptor_table_s2s_5fglobal_5fdata_2eproto_once,
      file_level_metadata_s2s_5fglobal_5fdata_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace S2S
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::S2S::S2SPlayerSessionData*
Arena::CreateMaybeMessage< ::S2S::S2SPlayerSessionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::S2S::S2SPlayerSessionData >(arena);
}
template<> PROTOBUF_NOINLINE ::S2S::S2SZoneServerData*
Arena::CreateMaybeMessage< ::S2S::S2SZoneServerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::S2S::S2SZoneServerData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
