// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_mongo_proxy.proto

#include "db_mongo_proxy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DB {
PROTOBUF_CONSTEXPR ProtoBsonData::ProtoBsonData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_bin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_type_)*/0
  , /*decltype(_impl_.var_int32_)*/0
  , /*decltype(_impl_.var_int64_)*/int64_t{0}
  , /*decltype(_impl_.var_double_)*/0
  , /*decltype(_impl_.var_bool_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtoBsonDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtoBsonDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtoBsonDataDefaultTypeInternal() {}
  union {
    ProtoBsonData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtoBsonDataDefaultTypeInternal _ProtoBsonData_default_instance_;
PROTOBUF_CONSTEXPR ProtoBsonObj::ProtoBsonObj(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bson_data_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtoBsonObjDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtoBsonObjDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtoBsonObjDefaultTypeInternal() {}
  union {
    ProtoBsonObj _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtoBsonObjDefaultTypeInternal _ProtoBsonObj_default_instance_;
PROTOBUF_CONSTEXPR MongoUserData::MongoUserData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sdk_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.str_var1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.str_var2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trans_gid_)*/uint64_t{0u}
  , /*decltype(_impl_.session_gid_)*/uint64_t{0u}
  , /*decltype(_impl_.player_gid_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.svr_id_)*/0
  , /*decltype(_impl_.other_player_gid_)*/uint64_t{0u}
  , /*decltype(_impl_.offline_msg_gid_)*/uint64_t{0u}
  , /*decltype(_impl_.int_var1_)*/0
  , /*decltype(_impl_.int_var2_)*/0
  , /*decltype(_impl_.int_var3_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MongoUserDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoUserDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoUserDataDefaultTypeInternal() {}
  union {
    MongoUserData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoUserDataDefaultTypeInternal _MongoUserData_default_instance_;
PROTOBUF_CONSTEXPR MongoInsertReq::MongoInsertReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.col_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.doc_)*/nullptr
  , /*decltype(_impl_.user_data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MongoInsertReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoInsertReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoInsertReqDefaultTypeInternal() {}
  union {
    MongoInsertReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoInsertReqDefaultTypeInternal _MongoInsertReq_default_instance_;
PROTOBUF_CONSTEXPR MongoInsertRes::MongoInsertRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_data_)*/nullptr
  , /*decltype(_impl_.succeed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MongoInsertResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoInsertResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoInsertResDefaultTypeInternal() {}
  union {
    MongoInsertRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoInsertResDefaultTypeInternal _MongoInsertRes_default_instance_;
PROTOBUF_CONSTEXPR MongoRemoveReq::MongoRemoveReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.col_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.selector_)*/nullptr
  , /*decltype(_impl_.user_data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MongoRemoveReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoRemoveReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoRemoveReqDefaultTypeInternal() {}
  union {
    MongoRemoveReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoRemoveReqDefaultTypeInternal _MongoRemoveReq_default_instance_;
PROTOBUF_CONSTEXPR MongoRemoveRes::MongoRemoveRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_data_)*/nullptr
  , /*decltype(_impl_.succeed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MongoRemoveResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoRemoveResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoRemoveResDefaultTypeInternal() {}
  union {
    MongoRemoveRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoRemoveResDefaultTypeInternal _MongoRemoveRes_default_instance_;
PROTOBUF_CONSTEXPR MongoSaveReq::MongoSaveReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.col_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.doc_)*/nullptr
  , /*decltype(_impl_.user_data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MongoSaveReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoSaveReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoSaveReqDefaultTypeInternal() {}
  union {
    MongoSaveReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoSaveReqDefaultTypeInternal _MongoSaveReq_default_instance_;
PROTOBUF_CONSTEXPR MongoSaveRes::MongoSaveRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_data_)*/nullptr
  , /*decltype(_impl_.succeed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MongoSaveResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoSaveResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoSaveResDefaultTypeInternal() {}
  union {
    MongoSaveRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoSaveResDefaultTypeInternal _MongoSaveRes_default_instance_;
PROTOBUF_CONSTEXPR MongoUpdateReq::MongoUpdateReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.col_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.selector_)*/nullptr
  , /*decltype(_impl_.updator_)*/nullptr
  , /*decltype(_impl_.user_data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MongoUpdateReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoUpdateReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoUpdateReqDefaultTypeInternal() {}
  union {
    MongoUpdateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoUpdateReqDefaultTypeInternal _MongoUpdateReq_default_instance_;
PROTOBUF_CONSTEXPR MongoUpdateRes::MongoUpdateRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_data_)*/nullptr
  , /*decltype(_impl_.succeed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MongoUpdateResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoUpdateResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoUpdateResDefaultTypeInternal() {}
  union {
    MongoUpdateRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoUpdateResDefaultTypeInternal _MongoUpdateRes_default_instance_;
PROTOBUF_CONSTEXPR MongoFindReq::MongoFindReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.col_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.query_)*/nullptr
  , /*decltype(_impl_.fields_)*/nullptr
  , /*decltype(_impl_.user_data_)*/nullptr
  , /*decltype(_impl_.logic_batch_num_)*/0
  , /*decltype(_impl_.skip_)*/0
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_.batch_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MongoFindReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoFindReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoFindReqDefaultTypeInternal() {}
  union {
    MongoFindReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoFindReqDefaultTypeInternal _MongoFindReq_default_instance_;
PROTOBUF_CONSTEXPR MongoFindRes::MongoFindRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_list_)*/{}
  , /*decltype(_impl_.user_data_)*/nullptr
  , /*decltype(_impl_.succeed_)*/false
  , /*decltype(_impl_.has_more_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MongoFindResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoFindResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoFindResDefaultTypeInternal() {}
  union {
    MongoFindRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoFindResDefaultTypeInternal _MongoFindRes_default_instance_;
PROTOBUF_CONSTEXPR ProtoBsonBatchFindData::ProtoBsonBatchFindData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.int32_var_list_)*/{}
  , /*decltype(_impl_._int32_var_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.int64_var_list_)*/{}
  , /*decltype(_impl_._int64_var_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.string_var_list_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtoBsonBatchFindDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtoBsonBatchFindDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtoBsonBatchFindDataDefaultTypeInternal() {}
  union {
    ProtoBsonBatchFindData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtoBsonBatchFindDataDefaultTypeInternal _ProtoBsonBatchFindData_default_instance_;
PROTOBUF_CONSTEXPR MongoBatchFindReq::MongoBatchFindReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.col_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.query_)*/nullptr
  , /*decltype(_impl_.fields_)*/nullptr
  , /*decltype(_impl_.user_data_)*/nullptr
  , /*decltype(_impl_.logic_batch_num_)*/0
  , /*decltype(_impl_.skip_)*/0
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_.batch_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MongoBatchFindReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoBatchFindReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoBatchFindReqDefaultTypeInternal() {}
  union {
    MongoBatchFindReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoBatchFindReqDefaultTypeInternal _MongoBatchFindReq_default_instance_;
PROTOBUF_CONSTEXPR MongoBatchFindRes::MongoBatchFindRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_list_)*/{}
  , /*decltype(_impl_.user_data_)*/nullptr
  , /*decltype(_impl_.succeed_)*/false
  , /*decltype(_impl_.has_more_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MongoBatchFindResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoBatchFindResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoBatchFindResDefaultTypeInternal() {}
  union {
    MongoBatchFindRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoBatchFindResDefaultTypeInternal _MongoBatchFindRes_default_instance_;
PROTOBUF_CONSTEXPR MongoDBMsg::MongoDBMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.insert_req_)*/nullptr
  , /*decltype(_impl_.insert_res_)*/nullptr
  , /*decltype(_impl_.remove_req_)*/nullptr
  , /*decltype(_impl_.remove_res_)*/nullptr
  , /*decltype(_impl_.save_req_)*/nullptr
  , /*decltype(_impl_.save_res_)*/nullptr
  , /*decltype(_impl_.update_req_)*/nullptr
  , /*decltype(_impl_.update_res_)*/nullptr
  , /*decltype(_impl_.find_req_)*/nullptr
  , /*decltype(_impl_.find_res_)*/nullptr
  , /*decltype(_impl_.batch_find_req_)*/nullptr
  , /*decltype(_impl_.batch_find_res_)*/nullptr
  , /*decltype(_impl_.cmd_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MongoDBMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoDBMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoDBMsgDefaultTypeInternal() {}
  union {
    MongoDBMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoDBMsgDefaultTypeInternal _MongoDBMsg_default_instance_;
}  // namespace DB
static ::_pb::Metadata file_level_metadata_db_5fmongo_5fproxy_2eproto[17];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_db_5fmongo_5fproxy_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_db_5fmongo_5fproxy_2eproto = nullptr;

const uint32_t TableStruct_db_5fmongo_5fproxy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB::ProtoBsonData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DB::ProtoBsonData, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::DB::ProtoBsonData, _impl_.data_type_),
  PROTOBUF_FIELD_OFFSET(::DB::ProtoBsonData, _impl_.var_int32_),
  PROTOBUF_FIELD_OFFSET(::DB::ProtoBsonData, _impl_.var_int64_),
  PROTOBUF_FIELD_OFFSET(::DB::ProtoBsonData, _impl_.var_double_),
  PROTOBUF_FIELD_OFFSET(::DB::ProtoBsonData, _impl_.var_bool_),
  PROTOBUF_FIELD_OFFSET(::DB::ProtoBsonData, _impl_.var_string_),
  PROTOBUF_FIELD_OFFSET(::DB::ProtoBsonData, _impl_.var_bin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB::ProtoBsonObj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DB::ProtoBsonObj, _impl_.bson_data_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB::MongoUserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DB::MongoUserData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoUserData, _impl_.trans_gid_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoUserData, _impl_.session_gid_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoUserData, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoUserData, _impl_.player_gid_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoUserData, _impl_.other_player_gid_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoUserData, _impl_.offline_msg_gid_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoUserData, _impl_.sdk_user_id_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoUserData, _impl_.svr_id_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoUserData, _impl_.int_var1_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoUserData, _impl_.int_var2_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoUserData, _impl_.int_var3_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoUserData, _impl_.str_var1_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoUserData, _impl_.str_var2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB::MongoInsertReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DB::MongoInsertReq, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoInsertReq, _impl_.col_name_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoInsertReq, _impl_.doc_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoInsertReq, _impl_.user_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB::MongoInsertRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DB::MongoInsertRes, _impl_.succeed_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoInsertRes, _impl_.user_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB::MongoRemoveReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DB::MongoRemoveReq, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoRemoveReq, _impl_.col_name_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoRemoveReq, _impl_.selector_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoRemoveReq, _impl_.user_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB::MongoRemoveRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DB::MongoRemoveRes, _impl_.succeed_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoRemoveRes, _impl_.user_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB::MongoSaveReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DB::MongoSaveReq, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoSaveReq, _impl_.col_name_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoSaveReq, _impl_.doc_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoSaveReq, _impl_.user_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB::MongoSaveRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DB::MongoSaveRes, _impl_.succeed_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoSaveRes, _impl_.user_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB::MongoUpdateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DB::MongoUpdateReq, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoUpdateReq, _impl_.col_name_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoUpdateReq, _impl_.selector_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoUpdateReq, _impl_.updator_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoUpdateReq, _impl_.user_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB::MongoUpdateRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DB::MongoUpdateRes, _impl_.succeed_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoUpdateRes, _impl_.user_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB::MongoFindReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DB::MongoFindReq, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoFindReq, _impl_.col_name_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoFindReq, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoFindReq, _impl_.fields_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoFindReq, _impl_.logic_batch_num_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoFindReq, _impl_.skip_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoFindReq, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoFindReq, _impl_.batch_size_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoFindReq, _impl_.user_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB::MongoFindRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DB::MongoFindRes, _impl_.succeed_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoFindRes, _impl_.has_more_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoFindRes, _impl_.data_list_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoFindRes, _impl_.user_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB::ProtoBsonBatchFindData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DB::ProtoBsonBatchFindData, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::DB::ProtoBsonBatchFindData, _impl_.data_type_),
  PROTOBUF_FIELD_OFFSET(::DB::ProtoBsonBatchFindData, _impl_.int32_var_list_),
  PROTOBUF_FIELD_OFFSET(::DB::ProtoBsonBatchFindData, _impl_.int64_var_list_),
  PROTOBUF_FIELD_OFFSET(::DB::ProtoBsonBatchFindData, _impl_.string_var_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB::MongoBatchFindReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DB::MongoBatchFindReq, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoBatchFindReq, _impl_.col_name_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoBatchFindReq, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoBatchFindReq, _impl_.fields_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoBatchFindReq, _impl_.logic_batch_num_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoBatchFindReq, _impl_.skip_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoBatchFindReq, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoBatchFindReq, _impl_.batch_size_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoBatchFindReq, _impl_.user_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB::MongoBatchFindRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DB::MongoBatchFindRes, _impl_.succeed_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoBatchFindRes, _impl_.has_more_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoBatchFindRes, _impl_.data_list_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoBatchFindRes, _impl_.user_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DB::MongoDBMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DB::MongoDBMsg, _impl_.cmd_type_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoDBMsg, _impl_.insert_req_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoDBMsg, _impl_.insert_res_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoDBMsg, _impl_.remove_req_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoDBMsg, _impl_.remove_res_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoDBMsg, _impl_.save_req_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoDBMsg, _impl_.save_res_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoDBMsg, _impl_.update_req_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoDBMsg, _impl_.update_res_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoDBMsg, _impl_.find_req_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoDBMsg, _impl_.find_res_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoDBMsg, _impl_.batch_find_req_),
  PROTOBUF_FIELD_OFFSET(::DB::MongoDBMsg, _impl_.batch_find_res_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DB::ProtoBsonData)},
  { 14, -1, -1, sizeof(::DB::ProtoBsonObj)},
  { 21, -1, -1, sizeof(::DB::MongoUserData)},
  { 41, -1, -1, sizeof(::DB::MongoInsertReq)},
  { 51, -1, -1, sizeof(::DB::MongoInsertRes)},
  { 59, -1, -1, sizeof(::DB::MongoRemoveReq)},
  { 69, -1, -1, sizeof(::DB::MongoRemoveRes)},
  { 77, -1, -1, sizeof(::DB::MongoSaveReq)},
  { 87, -1, -1, sizeof(::DB::MongoSaveRes)},
  { 95, -1, -1, sizeof(::DB::MongoUpdateReq)},
  { 106, -1, -1, sizeof(::DB::MongoUpdateRes)},
  { 114, -1, -1, sizeof(::DB::MongoFindReq)},
  { 129, -1, -1, sizeof(::DB::MongoFindRes)},
  { 139, -1, -1, sizeof(::DB::ProtoBsonBatchFindData)},
  { 150, -1, -1, sizeof(::DB::MongoBatchFindReq)},
  { 165, -1, -1, sizeof(::DB::MongoBatchFindRes)},
  { 175, -1, -1, sizeof(::DB::MongoDBMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::DB::_ProtoBsonData_default_instance_._instance,
  &::DB::_ProtoBsonObj_default_instance_._instance,
  &::DB::_MongoUserData_default_instance_._instance,
  &::DB::_MongoInsertReq_default_instance_._instance,
  &::DB::_MongoInsertRes_default_instance_._instance,
  &::DB::_MongoRemoveReq_default_instance_._instance,
  &::DB::_MongoRemoveRes_default_instance_._instance,
  &::DB::_MongoSaveReq_default_instance_._instance,
  &::DB::_MongoSaveRes_default_instance_._instance,
  &::DB::_MongoUpdateReq_default_instance_._instance,
  &::DB::_MongoUpdateRes_default_instance_._instance,
  &::DB::_MongoFindReq_default_instance_._instance,
  &::DB::_MongoFindRes_default_instance_._instance,
  &::DB::_ProtoBsonBatchFindData_default_instance_._instance,
  &::DB::_MongoBatchFindReq_default_instance_._instance,
  &::DB::_MongoBatchFindRes_default_instance_._instance,
  &::DB::_MongoDBMsg_default_instance_._instance,
};

const char descriptor_table_protodef_db_5fmongo_5fproxy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024db_mongo_proxy.proto\022\002DB\"\240\001\n\rProtoBson"
  "Data\022\013\n\003key\030\001 \001(\t\022\021\n\tdata_type\030\002 \001(\005\022\021\n\t"
  "var_int32\030\003 \001(\005\022\021\n\tvar_int64\030\004 \001(\003\022\022\n\nva"
  "r_double\030\005 \001(\001\022\020\n\010var_bool\030\006 \001(\010\022\022\n\nvar_"
  "string\030\007 \001(\t\022\017\n\007var_bin\030\010 \001(\014\"9\n\014ProtoBs"
  "onObj\022)\n\016bson_data_list\030\001 \003(\0132\021.DB.Proto"
  "BsonData\"\237\002\n\rMongoUserData\022\014\n\004type\030\001 \001(\005"
  "\022\021\n\ttrans_gid\030\002 \001(\004\022\023\n\013session_gid\030\003 \001(\004"
  "\022\022\n\naccount_id\030\004 \001(\t\022\022\n\nplayer_gid\030\005 \001(\004"
  "\022\030\n\020other_player_gid\030\006 \001(\004\022\027\n\017offline_ms"
  "g_gid\030\007 \001(\004\022\023\n\013sdk_user_id\030\010 \001(\t\022\016\n\006svr_"
  "id\030\t \001(\005\022\020\n\010int_var1\030\n \001(\005\022\020\n\010int_var2\030\013"
  " \001(\005\022\020\n\010int_var3\030\014 \001(\005\022\020\n\010str_var1\030\r \001(\t"
  "\022\020\n\010str_var2\030\016 \001(\t\"x\n\016MongoInsertReq\022\017\n\007"
  "db_name\030\001 \001(\t\022\020\n\010col_name\030\002 \001(\t\022\035\n\003doc\030\003"
  " \001(\0132\020.DB.ProtoBsonObj\022$\n\tuser_data\030\004 \001("
  "\0132\021.DB.MongoUserData\"G\n\016MongoInsertRes\022\017"
  "\n\007succeed\030\001 \001(\010\022$\n\tuser_data\030\002 \001(\0132\021.DB."
  "MongoUserData\"}\n\016MongoRemoveReq\022\017\n\007db_na"
  "me\030\001 \001(\t\022\020\n\010col_name\030\002 \001(\t\022\"\n\010selector\030\003"
  " \001(\0132\020.DB.ProtoBsonObj\022$\n\tuser_data\030\004 \001("
  "\0132\021.DB.MongoUserData\"G\n\016MongoRemoveRes\022\017"
  "\n\007succeed\030\001 \001(\010\022$\n\tuser_data\030\002 \001(\0132\021.DB."
  "MongoUserData\"v\n\014MongoSaveReq\022\017\n\007db_name"
  "\030\001 \001(\t\022\020\n\010col_name\030\002 \001(\t\022\035\n\003doc\030\003 \001(\0132\020."
  "DB.ProtoBsonObj\022$\n\tuser_data\030\004 \001(\0132\021.DB."
  "MongoUserData\"E\n\014MongoSaveRes\022\017\n\007succeed"
  "\030\001 \001(\010\022$\n\tuser_data\030\002 \001(\0132\021.DB.MongoUser"
  "Data\"\240\001\n\016MongoUpdateReq\022\017\n\007db_name\030\001 \001(\t"
  "\022\020\n\010col_name\030\002 \001(\t\022\"\n\010selector\030\003 \001(\0132\020.D"
  "B.ProtoBsonObj\022!\n\007updator\030\004 \001(\0132\020.DB.Pro"
  "toBsonObj\022$\n\tuser_data\030\005 \001(\0132\021.DB.MongoU"
  "serData\"G\n\016MongoUpdateRes\022\017\n\007succeed\030\001 \001"
  "(\010\022$\n\tuser_data\030\002 \001(\0132\021.DB.MongoUserData"
  "\"\344\001\n\014MongoFindReq\022\017\n\007db_name\030\001 \001(\t\022\020\n\010co"
  "l_name\030\002 \001(\t\022\037\n\005query\030\003 \001(\0132\020.DB.ProtoBs"
  "onObj\022 \n\006fields\030\004 \001(\0132\020.DB.ProtoBsonObj\022"
  "\027\n\017logic_batch_num\030\005 \001(\005\022\014\n\004skip\030\006 \001(\005\022\r"
  "\n\005limit\030\007 \001(\005\022\022\n\nbatch_size\030\010 \001(\005\022$\n\tuse"
  "r_data\030\t \001(\0132\021.DB.MongoUserData\"|\n\014Mongo"
  "FindRes\022\017\n\007succeed\030\001 \001(\010\022\020\n\010has_more\030\002 \001"
  "(\010\022#\n\tdata_list\030\003 \003(\0132\020.DB.ProtoBsonObj\022"
  "$\n\tuser_data\030\004 \001(\0132\021.DB.MongoUserData\"\201\001"
  "\n\026ProtoBsonBatchFindData\022\013\n\003key\030\001 \001(\t\022\021\n"
  "\tdata_type\030\002 \001(\005\022\026\n\016int32_var_list\030\003 \003(\005"
  "\022\026\n\016int64_var_list\030\004 \003(\003\022\027\n\017string_var_l"
  "ist\030\005 \003(\t\"\363\001\n\021MongoBatchFindReq\022\017\n\007db_na"
  "me\030\001 \001(\t\022\020\n\010col_name\030\002 \001(\t\022)\n\005query\030\003 \001("
  "\0132\032.DB.ProtoBsonBatchFindData\022 \n\006fields\030"
  "\004 \001(\0132\020.DB.ProtoBsonObj\022\027\n\017logic_batch_n"
  "um\030\005 \001(\005\022\014\n\004skip\030\006 \001(\005\022\r\n\005limit\030\007 \001(\005\022\022\n"
  "\nbatch_size\030\010 \001(\005\022$\n\tuser_data\030\t \001(\0132\021.D"
  "B.MongoUserData\"\201\001\n\021MongoBatchFindRes\022\017\n"
  "\007succeed\030\001 \001(\010\022\020\n\010has_more\030\002 \001(\010\022#\n\tdata"
  "_list\030\003 \003(\0132\020.DB.ProtoBsonObj\022$\n\tuser_da"
  "ta\030\004 \001(\0132\021.DB.MongoUserData\"\374\003\n\nMongoDBM"
  "sg\022\020\n\010cmd_type\030\001 \001(\005\022&\n\ninsert_req\030\002 \001(\013"
  "2\022.DB.MongoInsertReq\022&\n\ninsert_res\030\003 \001(\013"
  "2\022.DB.MongoInsertRes\022&\n\nremove_req\030\004 \001(\013"
  "2\022.DB.MongoRemoveReq\022&\n\nremove_res\030\005 \001(\013"
  "2\022.DB.MongoRemoveRes\022\"\n\010save_req\030\006 \001(\0132\020"
  ".DB.MongoSaveReq\022\"\n\010save_res\030\007 \001(\0132\020.DB."
  "MongoSaveRes\022&\n\nupdate_req\030\010 \001(\0132\022.DB.Mo"
  "ngoUpdateReq\022&\n\nupdate_res\030\t \001(\0132\022.DB.Mo"
  "ngoUpdateRes\022\"\n\010find_req\030\n \001(\0132\020.DB.Mong"
  "oFindReq\022\"\n\010find_res\030\013 \001(\0132\020.DB.MongoFin"
  "dRes\022-\n\016batch_find_req\030\014 \001(\0132\025.DB.MongoB"
  "atchFindReq\022-\n\016batch_find_res\030\r \001(\0132\025.DB"
  ".MongoBatchFindRes*\332\002\n\014MongoMsgType\022\022\n\016M"
  "ONGO_MSG_NULL\020\000\022\030\n\024MONGO_MSG_INSERT_REQ\020"
  "\001\022\030\n\024MONGO_MSG_INSERT_RES\020\002\022\030\n\024MONGO_MSG"
  "_REMOVE_REQ\020\003\022\030\n\024MONGO_MSG_REMOVE_RES\020\004\022"
  "\026\n\022MONGO_MSG_SAVE_REQ\020\005\022\026\n\022MONGO_MSG_SAV"
  "E_RES\020\006\022\030\n\024MONGO_MSG_UPDATE_REQ\020\007\022\030\n\024MON"
  "GO_MSG_UPDATE_RES\020\010\022\026\n\022MONGO_MSG_FIND_RE"
  "Q\020\t\022\026\n\022MONGO_MSG_FIND_RES\020\n\022\034\n\030MONGO_MSG"
  "_BATCH_FIND_REQ\020\013\022\034\n\030MONGO_MSG_BATCH_FIN"
  "D_RES\020\014b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_db_5fmongo_5fproxy_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_db_5fmongo_5fproxy_2eproto = {
    false, false, 3095, descriptor_table_protodef_db_5fmongo_5fproxy_2eproto,
    "db_mongo_proxy.proto",
    &descriptor_table_db_5fmongo_5fproxy_2eproto_once, nullptr, 0, 17,
    schemas, file_default_instances, TableStruct_db_5fmongo_5fproxy_2eproto::offsets,
    file_level_metadata_db_5fmongo_5fproxy_2eproto, file_level_enum_descriptors_db_5fmongo_5fproxy_2eproto,
    file_level_service_descriptors_db_5fmongo_5fproxy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_db_5fmongo_5fproxy_2eproto_getter() {
  return &descriptor_table_db_5fmongo_5fproxy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_db_5fmongo_5fproxy_2eproto(&descriptor_table_db_5fmongo_5fproxy_2eproto);
namespace DB {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MongoMsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_5fmongo_5fproxy_2eproto);
  return file_level_enum_descriptors_db_5fmongo_5fproxy_2eproto[0];
}
bool MongoMsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ProtoBsonData::_Internal {
 public:
};

ProtoBsonData::ProtoBsonData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DB.ProtoBsonData)
}
ProtoBsonData::ProtoBsonData(const ProtoBsonData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtoBsonData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.var_string_){}
    , decltype(_impl_.var_bin_){}
    , decltype(_impl_.data_type_){}
    , decltype(_impl_.var_int32_){}
    , decltype(_impl_.var_int64_){}
    , decltype(_impl_.var_double_){}
    , decltype(_impl_.var_bool_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string().empty()) {
    _this->_impl_.var_string_.Set(from._internal_var_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_bin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_bin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_bin().empty()) {
    _this->_impl_.var_bin_.Set(from._internal_var_bin(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.data_type_, &from._impl_.data_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.var_bool_) -
    reinterpret_cast<char*>(&_impl_.data_type_)) + sizeof(_impl_.var_bool_));
  // @@protoc_insertion_point(copy_constructor:DB.ProtoBsonData)
}

inline void ProtoBsonData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.var_string_){}
    , decltype(_impl_.var_bin_){}
    , decltype(_impl_.data_type_){0}
    , decltype(_impl_.var_int32_){0}
    , decltype(_impl_.var_int64_){int64_t{0}}
    , decltype(_impl_.var_double_){0}
    , decltype(_impl_.var_bool_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_bin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_bin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProtoBsonData::~ProtoBsonData() {
  // @@protoc_insertion_point(destructor:DB.ProtoBsonData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtoBsonData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.var_string_.Destroy();
  _impl_.var_bin_.Destroy();
}

void ProtoBsonData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtoBsonData::Clear() {
// @@protoc_insertion_point(message_clear_start:DB.ProtoBsonData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.var_string_.ClearToEmpty();
  _impl_.var_bin_.ClearToEmpty();
  ::memset(&_impl_.data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.var_bool_) -
      reinterpret_cast<char*>(&_impl_.data_type_)) + sizeof(_impl_.var_bool_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoBsonData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DB.ProtoBsonData.key"));
        } else
          goto handle_unusual;
        continue;
      // int32 data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.data_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.var_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.var_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double var_double = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.var_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.var_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var_string = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_var_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DB.ProtoBsonData.var_string"));
        } else
          goto handle_unusual;
        continue;
      // bytes var_bin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_var_bin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoBsonData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB.ProtoBsonData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.ProtoBsonData.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int32 data_type = 2;
  if (this->_internal_data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_data_type(), target);
  }

  // int32 var_int32 = 3;
  if (this->_internal_var_int32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_int32(), target);
  }

  // int64 var_int64 = 4;
  if (this->_internal_var_int64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_var_int64(), target);
  }

  // double var_double = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double = this->_internal_var_double();
  uint64_t raw_var_double;
  memcpy(&raw_var_double, &tmp_var_double, sizeof(tmp_var_double));
  if (raw_var_double != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_var_double(), target);
  }

  // bool var_bool = 6;
  if (this->_internal_var_bool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_var_bool(), target);
  }

  // string var_string = 7;
  if (!this->_internal_var_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string().data(), static_cast<int>(this->_internal_var_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.ProtoBsonData.var_string");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_var_string(), target);
  }

  // bytes var_bin = 8;
  if (!this->_internal_var_bin().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_var_bin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB.ProtoBsonData)
  return target;
}

size_t ProtoBsonData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB.ProtoBsonData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string var_string = 7;
  if (!this->_internal_var_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string());
  }

  // bytes var_bin = 8;
  if (!this->_internal_var_bin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_var_bin());
  }

  // int32 data_type = 2;
  if (this->_internal_data_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_type());
  }

  // int32 var_int32 = 3;
  if (this->_internal_var_int32() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int32());
  }

  // int64 var_int64 = 4;
  if (this->_internal_var_int64() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int64());
  }

  // double var_double = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double = this->_internal_var_double();
  uint64_t raw_var_double;
  memcpy(&raw_var_double, &tmp_var_double, sizeof(tmp_var_double));
  if (raw_var_double != 0) {
    total_size += 1 + 8;
  }

  // bool var_bool = 6;
  if (this->_internal_var_bool() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoBsonData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtoBsonData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoBsonData::GetClassData() const { return &_class_data_; }


void ProtoBsonData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtoBsonData*>(&to_msg);
  auto& from = static_cast<const ProtoBsonData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DB.ProtoBsonData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_var_string().empty()) {
    _this->_internal_set_var_string(from._internal_var_string());
  }
  if (!from._internal_var_bin().empty()) {
    _this->_internal_set_var_bin(from._internal_var_bin());
  }
  if (from._internal_data_type() != 0) {
    _this->_internal_set_data_type(from._internal_data_type());
  }
  if (from._internal_var_int32() != 0) {
    _this->_internal_set_var_int32(from._internal_var_int32());
  }
  if (from._internal_var_int64() != 0) {
    _this->_internal_set_var_int64(from._internal_var_int64());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double = from._internal_var_double();
  uint64_t raw_var_double;
  memcpy(&raw_var_double, &tmp_var_double, sizeof(tmp_var_double));
  if (raw_var_double != 0) {
    _this->_internal_set_var_double(from._internal_var_double());
  }
  if (from._internal_var_bool() != 0) {
    _this->_internal_set_var_bool(from._internal_var_bool());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoBsonData::CopyFrom(const ProtoBsonData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB.ProtoBsonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBsonData::IsInitialized() const {
  return true;
}

void ProtoBsonData::InternalSwap(ProtoBsonData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string_, lhs_arena,
      &other->_impl_.var_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_bin_, lhs_arena,
      &other->_impl_.var_bin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoBsonData, _impl_.var_bool_)
      + sizeof(ProtoBsonData::_impl_.var_bool_)
      - PROTOBUF_FIELD_OFFSET(ProtoBsonData, _impl_.data_type_)>(
          reinterpret_cast<char*>(&_impl_.data_type_),
          reinterpret_cast<char*>(&other->_impl_.data_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoBsonData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_5fmongo_5fproxy_2eproto_getter, &descriptor_table_db_5fmongo_5fproxy_2eproto_once,
      file_level_metadata_db_5fmongo_5fproxy_2eproto[0]);
}

// ===================================================================

class ProtoBsonObj::_Internal {
 public:
};

ProtoBsonObj::ProtoBsonObj(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DB.ProtoBsonObj)
}
ProtoBsonObj::ProtoBsonObj(const ProtoBsonObj& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtoBsonObj* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bson_data_list_){from._impl_.bson_data_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DB.ProtoBsonObj)
}

inline void ProtoBsonObj::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bson_data_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtoBsonObj::~ProtoBsonObj() {
  // @@protoc_insertion_point(destructor:DB.ProtoBsonObj)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtoBsonObj::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bson_data_list_.~RepeatedPtrField();
}

void ProtoBsonObj::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtoBsonObj::Clear() {
// @@protoc_insertion_point(message_clear_start:DB.ProtoBsonObj)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bson_data_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoBsonObj::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DB.ProtoBsonData bson_data_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bson_data_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoBsonObj::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB.ProtoBsonObj)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DB.ProtoBsonData bson_data_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bson_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_bson_data_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB.ProtoBsonObj)
  return target;
}

size_t ProtoBsonObj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB.ProtoBsonObj)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DB.ProtoBsonData bson_data_list = 1;
  total_size += 1UL * this->_internal_bson_data_list_size();
  for (const auto& msg : this->_impl_.bson_data_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoBsonObj::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtoBsonObj::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoBsonObj::GetClassData() const { return &_class_data_; }


void ProtoBsonObj::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtoBsonObj*>(&to_msg);
  auto& from = static_cast<const ProtoBsonObj&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DB.ProtoBsonObj)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bson_data_list_.MergeFrom(from._impl_.bson_data_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoBsonObj::CopyFrom(const ProtoBsonObj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB.ProtoBsonObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBsonObj::IsInitialized() const {
  return true;
}

void ProtoBsonObj::InternalSwap(ProtoBsonObj* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bson_data_list_.InternalSwap(&other->_impl_.bson_data_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoBsonObj::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_5fmongo_5fproxy_2eproto_getter, &descriptor_table_db_5fmongo_5fproxy_2eproto_once,
      file_level_metadata_db_5fmongo_5fproxy_2eproto[1]);
}

// ===================================================================

class MongoUserData::_Internal {
 public:
};

MongoUserData::MongoUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DB.MongoUserData)
}
MongoUserData::MongoUserData(const MongoUserData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MongoUserData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.sdk_user_id_){}
    , decltype(_impl_.str_var1_){}
    , decltype(_impl_.str_var2_){}
    , decltype(_impl_.trans_gid_){}
    , decltype(_impl_.session_gid_){}
    , decltype(_impl_.player_gid_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.svr_id_){}
    , decltype(_impl_.other_player_gid_){}
    , decltype(_impl_.offline_msg_gid_){}
    , decltype(_impl_.int_var1_){}
    , decltype(_impl_.int_var2_){}
    , decltype(_impl_.int_var3_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sdk_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdk_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdk_user_id().empty()) {
    _this->_impl_.sdk_user_id_.Set(from._internal_sdk_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.str_var1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_var1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str_var1().empty()) {
    _this->_impl_.str_var1_.Set(from._internal_str_var1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.str_var2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_var2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str_var2().empty()) {
    _this->_impl_.str_var2_.Set(from._internal_str_var2(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.trans_gid_, &from._impl_.trans_gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.int_var3_) -
    reinterpret_cast<char*>(&_impl_.trans_gid_)) + sizeof(_impl_.int_var3_));
  // @@protoc_insertion_point(copy_constructor:DB.MongoUserData)
}

inline void MongoUserData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_){}
    , decltype(_impl_.sdk_user_id_){}
    , decltype(_impl_.str_var1_){}
    , decltype(_impl_.str_var2_){}
    , decltype(_impl_.trans_gid_){uint64_t{0u}}
    , decltype(_impl_.session_gid_){uint64_t{0u}}
    , decltype(_impl_.player_gid_){uint64_t{0u}}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.svr_id_){0}
    , decltype(_impl_.other_player_gid_){uint64_t{0u}}
    , decltype(_impl_.offline_msg_gid_){uint64_t{0u}}
    , decltype(_impl_.int_var1_){0}
    , decltype(_impl_.int_var2_){0}
    , decltype(_impl_.int_var3_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdk_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdk_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.str_var1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_var1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.str_var2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_var2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MongoUserData::~MongoUserData() {
  // @@protoc_insertion_point(destructor:DB.MongoUserData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MongoUserData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
  _impl_.sdk_user_id_.Destroy();
  _impl_.str_var1_.Destroy();
  _impl_.str_var2_.Destroy();
}

void MongoUserData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MongoUserData::Clear() {
// @@protoc_insertion_point(message_clear_start:DB.MongoUserData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _impl_.sdk_user_id_.ClearToEmpty();
  _impl_.str_var1_.ClearToEmpty();
  _impl_.str_var2_.ClearToEmpty();
  ::memset(&_impl_.trans_gid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.int_var3_) -
      reinterpret_cast<char*>(&_impl_.trans_gid_)) + sizeof(_impl_.int_var3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MongoUserData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 trans_gid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.trans_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 session_gid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.session_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string account_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DB.MongoUserData.account_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 player_gid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.player_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 other_player_gid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.other_player_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 offline_msg_gid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.offline_msg_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sdk_user_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_sdk_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DB.MongoUserData.sdk_user_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 svr_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.svr_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 int_var1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.int_var1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 int_var2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.int_var2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 int_var3 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.int_var3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string str_var1 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_str_var1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DB.MongoUserData.str_var1"));
        } else
          goto handle_unusual;
        continue;
      // string str_var2 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_str_var2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DB.MongoUserData.str_var2"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MongoUserData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB.MongoUserData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // uint64 trans_gid = 2;
  if (this->_internal_trans_gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_trans_gid(), target);
  }

  // uint64 session_gid = 3;
  if (this->_internal_session_gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_session_gid(), target);
  }

  // string account_id = 4;
  if (!this->_internal_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.MongoUserData.account_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_account_id(), target);
  }

  // uint64 player_gid = 5;
  if (this->_internal_player_gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_player_gid(), target);
  }

  // uint64 other_player_gid = 6;
  if (this->_internal_other_player_gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_other_player_gid(), target);
  }

  // uint64 offline_msg_gid = 7;
  if (this->_internal_offline_msg_gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_offline_msg_gid(), target);
  }

  // string sdk_user_id = 8;
  if (!this->_internal_sdk_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdk_user_id().data(), static_cast<int>(this->_internal_sdk_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.MongoUserData.sdk_user_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_sdk_user_id(), target);
  }

  // int32 svr_id = 9;
  if (this->_internal_svr_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_svr_id(), target);
  }

  // int32 int_var1 = 10;
  if (this->_internal_int_var1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_int_var1(), target);
  }

  // int32 int_var2 = 11;
  if (this->_internal_int_var2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_int_var2(), target);
  }

  // int32 int_var3 = 12;
  if (this->_internal_int_var3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_int_var3(), target);
  }

  // string str_var1 = 13;
  if (!this->_internal_str_var1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str_var1().data(), static_cast<int>(this->_internal_str_var1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.MongoUserData.str_var1");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_str_var1(), target);
  }

  // string str_var2 = 14;
  if (!this->_internal_str_var2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str_var2().data(), static_cast<int>(this->_internal_str_var2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.MongoUserData.str_var2");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_str_var2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB.MongoUserData)
  return target;
}

size_t MongoUserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB.MongoUserData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 4;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string sdk_user_id = 8;
  if (!this->_internal_sdk_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdk_user_id());
  }

  // string str_var1 = 13;
  if (!this->_internal_str_var1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str_var1());
  }

  // string str_var2 = 14;
  if (!this->_internal_str_var2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str_var2());
  }

  // uint64 trans_gid = 2;
  if (this->_internal_trans_gid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_trans_gid());
  }

  // uint64 session_gid = 3;
  if (this->_internal_session_gid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_session_gid());
  }

  // uint64 player_gid = 5;
  if (this->_internal_player_gid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_player_gid());
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 svr_id = 9;
  if (this->_internal_svr_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_svr_id());
  }

  // uint64 other_player_gid = 6;
  if (this->_internal_other_player_gid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_other_player_gid());
  }

  // uint64 offline_msg_gid = 7;
  if (this->_internal_offline_msg_gid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offline_msg_gid());
  }

  // int32 int_var1 = 10;
  if (this->_internal_int_var1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int_var1());
  }

  // int32 int_var2 = 11;
  if (this->_internal_int_var2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int_var2());
  }

  // int32 int_var3 = 12;
  if (this->_internal_int_var3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int_var3());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MongoUserData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MongoUserData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MongoUserData::GetClassData() const { return &_class_data_; }


void MongoUserData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MongoUserData*>(&to_msg);
  auto& from = static_cast<const MongoUserData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DB.MongoUserData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_sdk_user_id().empty()) {
    _this->_internal_set_sdk_user_id(from._internal_sdk_user_id());
  }
  if (!from._internal_str_var1().empty()) {
    _this->_internal_set_str_var1(from._internal_str_var1());
  }
  if (!from._internal_str_var2().empty()) {
    _this->_internal_set_str_var2(from._internal_str_var2());
  }
  if (from._internal_trans_gid() != 0) {
    _this->_internal_set_trans_gid(from._internal_trans_gid());
  }
  if (from._internal_session_gid() != 0) {
    _this->_internal_set_session_gid(from._internal_session_gid());
  }
  if (from._internal_player_gid() != 0) {
    _this->_internal_set_player_gid(from._internal_player_gid());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_svr_id() != 0) {
    _this->_internal_set_svr_id(from._internal_svr_id());
  }
  if (from._internal_other_player_gid() != 0) {
    _this->_internal_set_other_player_gid(from._internal_other_player_gid());
  }
  if (from._internal_offline_msg_gid() != 0) {
    _this->_internal_set_offline_msg_gid(from._internal_offline_msg_gid());
  }
  if (from._internal_int_var1() != 0) {
    _this->_internal_set_int_var1(from._internal_int_var1());
  }
  if (from._internal_int_var2() != 0) {
    _this->_internal_set_int_var2(from._internal_int_var2());
  }
  if (from._internal_int_var3() != 0) {
    _this->_internal_set_int_var3(from._internal_int_var3());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MongoUserData::CopyFrom(const MongoUserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB.MongoUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoUserData::IsInitialized() const {
  return true;
}

void MongoUserData::InternalSwap(MongoUserData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_id_, lhs_arena,
      &other->_impl_.account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdk_user_id_, lhs_arena,
      &other->_impl_.sdk_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.str_var1_, lhs_arena,
      &other->_impl_.str_var1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.str_var2_, lhs_arena,
      &other->_impl_.str_var2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MongoUserData, _impl_.int_var3_)
      + sizeof(MongoUserData::_impl_.int_var3_)
      - PROTOBUF_FIELD_OFFSET(MongoUserData, _impl_.trans_gid_)>(
          reinterpret_cast<char*>(&_impl_.trans_gid_),
          reinterpret_cast<char*>(&other->_impl_.trans_gid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoUserData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_5fmongo_5fproxy_2eproto_getter, &descriptor_table_db_5fmongo_5fproxy_2eproto_once,
      file_level_metadata_db_5fmongo_5fproxy_2eproto[2]);
}

// ===================================================================

class MongoInsertReq::_Internal {
 public:
  static const ::DB::ProtoBsonObj& doc(const MongoInsertReq* msg);
  static const ::DB::MongoUserData& user_data(const MongoInsertReq* msg);
};

const ::DB::ProtoBsonObj&
MongoInsertReq::_Internal::doc(const MongoInsertReq* msg) {
  return *msg->_impl_.doc_;
}
const ::DB::MongoUserData&
MongoInsertReq::_Internal::user_data(const MongoInsertReq* msg) {
  return *msg->_impl_.user_data_;
}
MongoInsertReq::MongoInsertReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DB.MongoInsertReq)
}
MongoInsertReq::MongoInsertReq(const MongoInsertReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MongoInsertReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.col_name_){}
    , decltype(_impl_.doc_){nullptr}
    , decltype(_impl_.user_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.col_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_col_name().empty()) {
    _this->_impl_.col_name_.Set(from._internal_col_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_doc()) {
    _this->_impl_.doc_ = new ::DB::ProtoBsonObj(*from._impl_.doc_);
  }
  if (from._internal_has_user_data()) {
    _this->_impl_.user_data_ = new ::DB::MongoUserData(*from._impl_.user_data_);
  }
  // @@protoc_insertion_point(copy_constructor:DB.MongoInsertReq)
}

inline void MongoInsertReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.col_name_){}
    , decltype(_impl_.doc_){nullptr}
    , decltype(_impl_.user_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.col_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MongoInsertReq::~MongoInsertReq() {
  // @@protoc_insertion_point(destructor:DB.MongoInsertReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MongoInsertReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.col_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.doc_;
  if (this != internal_default_instance()) delete _impl_.user_data_;
}

void MongoInsertReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MongoInsertReq::Clear() {
// @@protoc_insertion_point(message_clear_start:DB.MongoInsertReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.col_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.doc_ != nullptr) {
    delete _impl_.doc_;
  }
  _impl_.doc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.user_data_ != nullptr) {
    delete _impl_.user_data_;
  }
  _impl_.user_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MongoInsertReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DB.MongoInsertReq.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string col_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_col_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DB.MongoInsertReq.col_name"));
        } else
          goto handle_unusual;
        continue;
      // .DB.ProtoBsonObj doc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_doc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoUserData user_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MongoInsertReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB.MongoInsertReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.MongoInsertReq.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string col_name = 2;
  if (!this->_internal_col_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col_name().data(), static_cast<int>(this->_internal_col_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.MongoInsertReq.col_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_col_name(), target);
  }

  // .DB.ProtoBsonObj doc = 3;
  if (this->_internal_has_doc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::doc(this),
        _Internal::doc(this).GetCachedSize(), target, stream);
  }

  // .DB.MongoUserData user_data = 4;
  if (this->_internal_has_user_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::user_data(this),
        _Internal::user_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB.MongoInsertReq)
  return target;
}

size_t MongoInsertReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB.MongoInsertReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string col_name = 2;
  if (!this->_internal_col_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_col_name());
  }

  // .DB.ProtoBsonObj doc = 3;
  if (this->_internal_has_doc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.doc_);
  }

  // .DB.MongoUserData user_data = 4;
  if (this->_internal_has_user_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MongoInsertReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MongoInsertReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MongoInsertReq::GetClassData() const { return &_class_data_; }


void MongoInsertReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MongoInsertReq*>(&to_msg);
  auto& from = static_cast<const MongoInsertReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DB.MongoInsertReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_col_name().empty()) {
    _this->_internal_set_col_name(from._internal_col_name());
  }
  if (from._internal_has_doc()) {
    _this->_internal_mutable_doc()->::DB::ProtoBsonObj::MergeFrom(
        from._internal_doc());
  }
  if (from._internal_has_user_data()) {
    _this->_internal_mutable_user_data()->::DB::MongoUserData::MergeFrom(
        from._internal_user_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MongoInsertReq::CopyFrom(const MongoInsertReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB.MongoInsertReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoInsertReq::IsInitialized() const {
  return true;
}

void MongoInsertReq::InternalSwap(MongoInsertReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.col_name_, lhs_arena,
      &other->_impl_.col_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MongoInsertReq, _impl_.user_data_)
      + sizeof(MongoInsertReq::_impl_.user_data_)
      - PROTOBUF_FIELD_OFFSET(MongoInsertReq, _impl_.doc_)>(
          reinterpret_cast<char*>(&_impl_.doc_),
          reinterpret_cast<char*>(&other->_impl_.doc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoInsertReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_5fmongo_5fproxy_2eproto_getter, &descriptor_table_db_5fmongo_5fproxy_2eproto_once,
      file_level_metadata_db_5fmongo_5fproxy_2eproto[3]);
}

// ===================================================================

class MongoInsertRes::_Internal {
 public:
  static const ::DB::MongoUserData& user_data(const MongoInsertRes* msg);
};

const ::DB::MongoUserData&
MongoInsertRes::_Internal::user_data(const MongoInsertRes* msg) {
  return *msg->_impl_.user_data_;
}
MongoInsertRes::MongoInsertRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DB.MongoInsertRes)
}
MongoInsertRes::MongoInsertRes(const MongoInsertRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MongoInsertRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.succeed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_data()) {
    _this->_impl_.user_data_ = new ::DB::MongoUserData(*from._impl_.user_data_);
  }
  _this->_impl_.succeed_ = from._impl_.succeed_;
  // @@protoc_insertion_point(copy_constructor:DB.MongoInsertRes)
}

inline void MongoInsertRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.succeed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MongoInsertRes::~MongoInsertRes() {
  // @@protoc_insertion_point(destructor:DB.MongoInsertRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MongoInsertRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_data_;
}

void MongoInsertRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MongoInsertRes::Clear() {
// @@protoc_insertion_point(message_clear_start:DB.MongoInsertRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_data_ != nullptr) {
    delete _impl_.user_data_;
  }
  _impl_.user_data_ = nullptr;
  _impl_.succeed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MongoInsertRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool succeed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.succeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoUserData user_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MongoInsertRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB.MongoInsertRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool succeed = 1;
  if (this->_internal_succeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_succeed(), target);
  }

  // .DB.MongoUserData user_data = 2;
  if (this->_internal_has_user_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user_data(this),
        _Internal::user_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB.MongoInsertRes)
  return target;
}

size_t MongoInsertRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB.MongoInsertRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DB.MongoUserData user_data = 2;
  if (this->_internal_has_user_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_data_);
  }

  // bool succeed = 1;
  if (this->_internal_succeed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MongoInsertRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MongoInsertRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MongoInsertRes::GetClassData() const { return &_class_data_; }


void MongoInsertRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MongoInsertRes*>(&to_msg);
  auto& from = static_cast<const MongoInsertRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DB.MongoInsertRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_data()) {
    _this->_internal_mutable_user_data()->::DB::MongoUserData::MergeFrom(
        from._internal_user_data());
  }
  if (from._internal_succeed() != 0) {
    _this->_internal_set_succeed(from._internal_succeed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MongoInsertRes::CopyFrom(const MongoInsertRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB.MongoInsertRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoInsertRes::IsInitialized() const {
  return true;
}

void MongoInsertRes::InternalSwap(MongoInsertRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MongoInsertRes, _impl_.succeed_)
      + sizeof(MongoInsertRes::_impl_.succeed_)
      - PROTOBUF_FIELD_OFFSET(MongoInsertRes, _impl_.user_data_)>(
          reinterpret_cast<char*>(&_impl_.user_data_),
          reinterpret_cast<char*>(&other->_impl_.user_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoInsertRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_5fmongo_5fproxy_2eproto_getter, &descriptor_table_db_5fmongo_5fproxy_2eproto_once,
      file_level_metadata_db_5fmongo_5fproxy_2eproto[4]);
}

// ===================================================================

class MongoRemoveReq::_Internal {
 public:
  static const ::DB::ProtoBsonObj& selector(const MongoRemoveReq* msg);
  static const ::DB::MongoUserData& user_data(const MongoRemoveReq* msg);
};

const ::DB::ProtoBsonObj&
MongoRemoveReq::_Internal::selector(const MongoRemoveReq* msg) {
  return *msg->_impl_.selector_;
}
const ::DB::MongoUserData&
MongoRemoveReq::_Internal::user_data(const MongoRemoveReq* msg) {
  return *msg->_impl_.user_data_;
}
MongoRemoveReq::MongoRemoveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DB.MongoRemoveReq)
}
MongoRemoveReq::MongoRemoveReq(const MongoRemoveReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MongoRemoveReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.col_name_){}
    , decltype(_impl_.selector_){nullptr}
    , decltype(_impl_.user_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.col_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_col_name().empty()) {
    _this->_impl_.col_name_.Set(from._internal_col_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_selector()) {
    _this->_impl_.selector_ = new ::DB::ProtoBsonObj(*from._impl_.selector_);
  }
  if (from._internal_has_user_data()) {
    _this->_impl_.user_data_ = new ::DB::MongoUserData(*from._impl_.user_data_);
  }
  // @@protoc_insertion_point(copy_constructor:DB.MongoRemoveReq)
}

inline void MongoRemoveReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.col_name_){}
    , decltype(_impl_.selector_){nullptr}
    , decltype(_impl_.user_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.col_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MongoRemoveReq::~MongoRemoveReq() {
  // @@protoc_insertion_point(destructor:DB.MongoRemoveReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MongoRemoveReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.col_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.selector_;
  if (this != internal_default_instance()) delete _impl_.user_data_;
}

void MongoRemoveReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MongoRemoveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:DB.MongoRemoveReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.col_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.selector_ != nullptr) {
    delete _impl_.selector_;
  }
  _impl_.selector_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.user_data_ != nullptr) {
    delete _impl_.user_data_;
  }
  _impl_.user_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MongoRemoveReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DB.MongoRemoveReq.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string col_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_col_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DB.MongoRemoveReq.col_name"));
        } else
          goto handle_unusual;
        continue;
      // .DB.ProtoBsonObj selector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_selector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoUserData user_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MongoRemoveReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB.MongoRemoveReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.MongoRemoveReq.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string col_name = 2;
  if (!this->_internal_col_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col_name().data(), static_cast<int>(this->_internal_col_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.MongoRemoveReq.col_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_col_name(), target);
  }

  // .DB.ProtoBsonObj selector = 3;
  if (this->_internal_has_selector()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::selector(this),
        _Internal::selector(this).GetCachedSize(), target, stream);
  }

  // .DB.MongoUserData user_data = 4;
  if (this->_internal_has_user_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::user_data(this),
        _Internal::user_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB.MongoRemoveReq)
  return target;
}

size_t MongoRemoveReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB.MongoRemoveReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string col_name = 2;
  if (!this->_internal_col_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_col_name());
  }

  // .DB.ProtoBsonObj selector = 3;
  if (this->_internal_has_selector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.selector_);
  }

  // .DB.MongoUserData user_data = 4;
  if (this->_internal_has_user_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MongoRemoveReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MongoRemoveReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MongoRemoveReq::GetClassData() const { return &_class_data_; }


void MongoRemoveReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MongoRemoveReq*>(&to_msg);
  auto& from = static_cast<const MongoRemoveReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DB.MongoRemoveReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_col_name().empty()) {
    _this->_internal_set_col_name(from._internal_col_name());
  }
  if (from._internal_has_selector()) {
    _this->_internal_mutable_selector()->::DB::ProtoBsonObj::MergeFrom(
        from._internal_selector());
  }
  if (from._internal_has_user_data()) {
    _this->_internal_mutable_user_data()->::DB::MongoUserData::MergeFrom(
        from._internal_user_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MongoRemoveReq::CopyFrom(const MongoRemoveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB.MongoRemoveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoRemoveReq::IsInitialized() const {
  return true;
}

void MongoRemoveReq::InternalSwap(MongoRemoveReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.col_name_, lhs_arena,
      &other->_impl_.col_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MongoRemoveReq, _impl_.user_data_)
      + sizeof(MongoRemoveReq::_impl_.user_data_)
      - PROTOBUF_FIELD_OFFSET(MongoRemoveReq, _impl_.selector_)>(
          reinterpret_cast<char*>(&_impl_.selector_),
          reinterpret_cast<char*>(&other->_impl_.selector_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoRemoveReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_5fmongo_5fproxy_2eproto_getter, &descriptor_table_db_5fmongo_5fproxy_2eproto_once,
      file_level_metadata_db_5fmongo_5fproxy_2eproto[5]);
}

// ===================================================================

class MongoRemoveRes::_Internal {
 public:
  static const ::DB::MongoUserData& user_data(const MongoRemoveRes* msg);
};

const ::DB::MongoUserData&
MongoRemoveRes::_Internal::user_data(const MongoRemoveRes* msg) {
  return *msg->_impl_.user_data_;
}
MongoRemoveRes::MongoRemoveRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DB.MongoRemoveRes)
}
MongoRemoveRes::MongoRemoveRes(const MongoRemoveRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MongoRemoveRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.succeed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_data()) {
    _this->_impl_.user_data_ = new ::DB::MongoUserData(*from._impl_.user_data_);
  }
  _this->_impl_.succeed_ = from._impl_.succeed_;
  // @@protoc_insertion_point(copy_constructor:DB.MongoRemoveRes)
}

inline void MongoRemoveRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.succeed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MongoRemoveRes::~MongoRemoveRes() {
  // @@protoc_insertion_point(destructor:DB.MongoRemoveRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MongoRemoveRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_data_;
}

void MongoRemoveRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MongoRemoveRes::Clear() {
// @@protoc_insertion_point(message_clear_start:DB.MongoRemoveRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_data_ != nullptr) {
    delete _impl_.user_data_;
  }
  _impl_.user_data_ = nullptr;
  _impl_.succeed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MongoRemoveRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool succeed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.succeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoUserData user_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MongoRemoveRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB.MongoRemoveRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool succeed = 1;
  if (this->_internal_succeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_succeed(), target);
  }

  // .DB.MongoUserData user_data = 2;
  if (this->_internal_has_user_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user_data(this),
        _Internal::user_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB.MongoRemoveRes)
  return target;
}

size_t MongoRemoveRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB.MongoRemoveRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DB.MongoUserData user_data = 2;
  if (this->_internal_has_user_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_data_);
  }

  // bool succeed = 1;
  if (this->_internal_succeed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MongoRemoveRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MongoRemoveRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MongoRemoveRes::GetClassData() const { return &_class_data_; }


void MongoRemoveRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MongoRemoveRes*>(&to_msg);
  auto& from = static_cast<const MongoRemoveRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DB.MongoRemoveRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_data()) {
    _this->_internal_mutable_user_data()->::DB::MongoUserData::MergeFrom(
        from._internal_user_data());
  }
  if (from._internal_succeed() != 0) {
    _this->_internal_set_succeed(from._internal_succeed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MongoRemoveRes::CopyFrom(const MongoRemoveRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB.MongoRemoveRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoRemoveRes::IsInitialized() const {
  return true;
}

void MongoRemoveRes::InternalSwap(MongoRemoveRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MongoRemoveRes, _impl_.succeed_)
      + sizeof(MongoRemoveRes::_impl_.succeed_)
      - PROTOBUF_FIELD_OFFSET(MongoRemoveRes, _impl_.user_data_)>(
          reinterpret_cast<char*>(&_impl_.user_data_),
          reinterpret_cast<char*>(&other->_impl_.user_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoRemoveRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_5fmongo_5fproxy_2eproto_getter, &descriptor_table_db_5fmongo_5fproxy_2eproto_once,
      file_level_metadata_db_5fmongo_5fproxy_2eproto[6]);
}

// ===================================================================

class MongoSaveReq::_Internal {
 public:
  static const ::DB::ProtoBsonObj& doc(const MongoSaveReq* msg);
  static const ::DB::MongoUserData& user_data(const MongoSaveReq* msg);
};

const ::DB::ProtoBsonObj&
MongoSaveReq::_Internal::doc(const MongoSaveReq* msg) {
  return *msg->_impl_.doc_;
}
const ::DB::MongoUserData&
MongoSaveReq::_Internal::user_data(const MongoSaveReq* msg) {
  return *msg->_impl_.user_data_;
}
MongoSaveReq::MongoSaveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DB.MongoSaveReq)
}
MongoSaveReq::MongoSaveReq(const MongoSaveReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MongoSaveReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.col_name_){}
    , decltype(_impl_.doc_){nullptr}
    , decltype(_impl_.user_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.col_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_col_name().empty()) {
    _this->_impl_.col_name_.Set(from._internal_col_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_doc()) {
    _this->_impl_.doc_ = new ::DB::ProtoBsonObj(*from._impl_.doc_);
  }
  if (from._internal_has_user_data()) {
    _this->_impl_.user_data_ = new ::DB::MongoUserData(*from._impl_.user_data_);
  }
  // @@protoc_insertion_point(copy_constructor:DB.MongoSaveReq)
}

inline void MongoSaveReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.col_name_){}
    , decltype(_impl_.doc_){nullptr}
    , decltype(_impl_.user_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.col_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MongoSaveReq::~MongoSaveReq() {
  // @@protoc_insertion_point(destructor:DB.MongoSaveReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MongoSaveReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.col_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.doc_;
  if (this != internal_default_instance()) delete _impl_.user_data_;
}

void MongoSaveReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MongoSaveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:DB.MongoSaveReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.col_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.doc_ != nullptr) {
    delete _impl_.doc_;
  }
  _impl_.doc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.user_data_ != nullptr) {
    delete _impl_.user_data_;
  }
  _impl_.user_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MongoSaveReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DB.MongoSaveReq.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string col_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_col_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DB.MongoSaveReq.col_name"));
        } else
          goto handle_unusual;
        continue;
      // .DB.ProtoBsonObj doc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_doc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoUserData user_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MongoSaveReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB.MongoSaveReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.MongoSaveReq.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string col_name = 2;
  if (!this->_internal_col_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col_name().data(), static_cast<int>(this->_internal_col_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.MongoSaveReq.col_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_col_name(), target);
  }

  // .DB.ProtoBsonObj doc = 3;
  if (this->_internal_has_doc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::doc(this),
        _Internal::doc(this).GetCachedSize(), target, stream);
  }

  // .DB.MongoUserData user_data = 4;
  if (this->_internal_has_user_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::user_data(this),
        _Internal::user_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB.MongoSaveReq)
  return target;
}

size_t MongoSaveReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB.MongoSaveReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string col_name = 2;
  if (!this->_internal_col_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_col_name());
  }

  // .DB.ProtoBsonObj doc = 3;
  if (this->_internal_has_doc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.doc_);
  }

  // .DB.MongoUserData user_data = 4;
  if (this->_internal_has_user_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MongoSaveReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MongoSaveReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MongoSaveReq::GetClassData() const { return &_class_data_; }


void MongoSaveReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MongoSaveReq*>(&to_msg);
  auto& from = static_cast<const MongoSaveReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DB.MongoSaveReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_col_name().empty()) {
    _this->_internal_set_col_name(from._internal_col_name());
  }
  if (from._internal_has_doc()) {
    _this->_internal_mutable_doc()->::DB::ProtoBsonObj::MergeFrom(
        from._internal_doc());
  }
  if (from._internal_has_user_data()) {
    _this->_internal_mutable_user_data()->::DB::MongoUserData::MergeFrom(
        from._internal_user_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MongoSaveReq::CopyFrom(const MongoSaveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB.MongoSaveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoSaveReq::IsInitialized() const {
  return true;
}

void MongoSaveReq::InternalSwap(MongoSaveReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.col_name_, lhs_arena,
      &other->_impl_.col_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MongoSaveReq, _impl_.user_data_)
      + sizeof(MongoSaveReq::_impl_.user_data_)
      - PROTOBUF_FIELD_OFFSET(MongoSaveReq, _impl_.doc_)>(
          reinterpret_cast<char*>(&_impl_.doc_),
          reinterpret_cast<char*>(&other->_impl_.doc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoSaveReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_5fmongo_5fproxy_2eproto_getter, &descriptor_table_db_5fmongo_5fproxy_2eproto_once,
      file_level_metadata_db_5fmongo_5fproxy_2eproto[7]);
}

// ===================================================================

class MongoSaveRes::_Internal {
 public:
  static const ::DB::MongoUserData& user_data(const MongoSaveRes* msg);
};

const ::DB::MongoUserData&
MongoSaveRes::_Internal::user_data(const MongoSaveRes* msg) {
  return *msg->_impl_.user_data_;
}
MongoSaveRes::MongoSaveRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DB.MongoSaveRes)
}
MongoSaveRes::MongoSaveRes(const MongoSaveRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MongoSaveRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.succeed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_data()) {
    _this->_impl_.user_data_ = new ::DB::MongoUserData(*from._impl_.user_data_);
  }
  _this->_impl_.succeed_ = from._impl_.succeed_;
  // @@protoc_insertion_point(copy_constructor:DB.MongoSaveRes)
}

inline void MongoSaveRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.succeed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MongoSaveRes::~MongoSaveRes() {
  // @@protoc_insertion_point(destructor:DB.MongoSaveRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MongoSaveRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_data_;
}

void MongoSaveRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MongoSaveRes::Clear() {
// @@protoc_insertion_point(message_clear_start:DB.MongoSaveRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_data_ != nullptr) {
    delete _impl_.user_data_;
  }
  _impl_.user_data_ = nullptr;
  _impl_.succeed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MongoSaveRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool succeed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.succeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoUserData user_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MongoSaveRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB.MongoSaveRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool succeed = 1;
  if (this->_internal_succeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_succeed(), target);
  }

  // .DB.MongoUserData user_data = 2;
  if (this->_internal_has_user_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user_data(this),
        _Internal::user_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB.MongoSaveRes)
  return target;
}

size_t MongoSaveRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB.MongoSaveRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DB.MongoUserData user_data = 2;
  if (this->_internal_has_user_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_data_);
  }

  // bool succeed = 1;
  if (this->_internal_succeed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MongoSaveRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MongoSaveRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MongoSaveRes::GetClassData() const { return &_class_data_; }


void MongoSaveRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MongoSaveRes*>(&to_msg);
  auto& from = static_cast<const MongoSaveRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DB.MongoSaveRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_data()) {
    _this->_internal_mutable_user_data()->::DB::MongoUserData::MergeFrom(
        from._internal_user_data());
  }
  if (from._internal_succeed() != 0) {
    _this->_internal_set_succeed(from._internal_succeed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MongoSaveRes::CopyFrom(const MongoSaveRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB.MongoSaveRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoSaveRes::IsInitialized() const {
  return true;
}

void MongoSaveRes::InternalSwap(MongoSaveRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MongoSaveRes, _impl_.succeed_)
      + sizeof(MongoSaveRes::_impl_.succeed_)
      - PROTOBUF_FIELD_OFFSET(MongoSaveRes, _impl_.user_data_)>(
          reinterpret_cast<char*>(&_impl_.user_data_),
          reinterpret_cast<char*>(&other->_impl_.user_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoSaveRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_5fmongo_5fproxy_2eproto_getter, &descriptor_table_db_5fmongo_5fproxy_2eproto_once,
      file_level_metadata_db_5fmongo_5fproxy_2eproto[8]);
}

// ===================================================================

class MongoUpdateReq::_Internal {
 public:
  static const ::DB::ProtoBsonObj& selector(const MongoUpdateReq* msg);
  static const ::DB::ProtoBsonObj& updator(const MongoUpdateReq* msg);
  static const ::DB::MongoUserData& user_data(const MongoUpdateReq* msg);
};

const ::DB::ProtoBsonObj&
MongoUpdateReq::_Internal::selector(const MongoUpdateReq* msg) {
  return *msg->_impl_.selector_;
}
const ::DB::ProtoBsonObj&
MongoUpdateReq::_Internal::updator(const MongoUpdateReq* msg) {
  return *msg->_impl_.updator_;
}
const ::DB::MongoUserData&
MongoUpdateReq::_Internal::user_data(const MongoUpdateReq* msg) {
  return *msg->_impl_.user_data_;
}
MongoUpdateReq::MongoUpdateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DB.MongoUpdateReq)
}
MongoUpdateReq::MongoUpdateReq(const MongoUpdateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MongoUpdateReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.col_name_){}
    , decltype(_impl_.selector_){nullptr}
    , decltype(_impl_.updator_){nullptr}
    , decltype(_impl_.user_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.col_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_col_name().empty()) {
    _this->_impl_.col_name_.Set(from._internal_col_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_selector()) {
    _this->_impl_.selector_ = new ::DB::ProtoBsonObj(*from._impl_.selector_);
  }
  if (from._internal_has_updator()) {
    _this->_impl_.updator_ = new ::DB::ProtoBsonObj(*from._impl_.updator_);
  }
  if (from._internal_has_user_data()) {
    _this->_impl_.user_data_ = new ::DB::MongoUserData(*from._impl_.user_data_);
  }
  // @@protoc_insertion_point(copy_constructor:DB.MongoUpdateReq)
}

inline void MongoUpdateReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.col_name_){}
    , decltype(_impl_.selector_){nullptr}
    , decltype(_impl_.updator_){nullptr}
    , decltype(_impl_.user_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.col_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MongoUpdateReq::~MongoUpdateReq() {
  // @@protoc_insertion_point(destructor:DB.MongoUpdateReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MongoUpdateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.col_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.selector_;
  if (this != internal_default_instance()) delete _impl_.updator_;
  if (this != internal_default_instance()) delete _impl_.user_data_;
}

void MongoUpdateReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MongoUpdateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:DB.MongoUpdateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.col_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.selector_ != nullptr) {
    delete _impl_.selector_;
  }
  _impl_.selector_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updator_ != nullptr) {
    delete _impl_.updator_;
  }
  _impl_.updator_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.user_data_ != nullptr) {
    delete _impl_.user_data_;
  }
  _impl_.user_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MongoUpdateReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DB.MongoUpdateReq.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string col_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_col_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DB.MongoUpdateReq.col_name"));
        } else
          goto handle_unusual;
        continue;
      // .DB.ProtoBsonObj selector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_selector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.ProtoBsonObj updator = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_updator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoUserData user_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MongoUpdateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB.MongoUpdateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.MongoUpdateReq.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string col_name = 2;
  if (!this->_internal_col_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col_name().data(), static_cast<int>(this->_internal_col_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.MongoUpdateReq.col_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_col_name(), target);
  }

  // .DB.ProtoBsonObj selector = 3;
  if (this->_internal_has_selector()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::selector(this),
        _Internal::selector(this).GetCachedSize(), target, stream);
  }

  // .DB.ProtoBsonObj updator = 4;
  if (this->_internal_has_updator()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::updator(this),
        _Internal::updator(this).GetCachedSize(), target, stream);
  }

  // .DB.MongoUserData user_data = 5;
  if (this->_internal_has_user_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::user_data(this),
        _Internal::user_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB.MongoUpdateReq)
  return target;
}

size_t MongoUpdateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB.MongoUpdateReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string col_name = 2;
  if (!this->_internal_col_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_col_name());
  }

  // .DB.ProtoBsonObj selector = 3;
  if (this->_internal_has_selector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.selector_);
  }

  // .DB.ProtoBsonObj updator = 4;
  if (this->_internal_has_updator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updator_);
  }

  // .DB.MongoUserData user_data = 5;
  if (this->_internal_has_user_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MongoUpdateReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MongoUpdateReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MongoUpdateReq::GetClassData() const { return &_class_data_; }


void MongoUpdateReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MongoUpdateReq*>(&to_msg);
  auto& from = static_cast<const MongoUpdateReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DB.MongoUpdateReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_col_name().empty()) {
    _this->_internal_set_col_name(from._internal_col_name());
  }
  if (from._internal_has_selector()) {
    _this->_internal_mutable_selector()->::DB::ProtoBsonObj::MergeFrom(
        from._internal_selector());
  }
  if (from._internal_has_updator()) {
    _this->_internal_mutable_updator()->::DB::ProtoBsonObj::MergeFrom(
        from._internal_updator());
  }
  if (from._internal_has_user_data()) {
    _this->_internal_mutable_user_data()->::DB::MongoUserData::MergeFrom(
        from._internal_user_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MongoUpdateReq::CopyFrom(const MongoUpdateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB.MongoUpdateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoUpdateReq::IsInitialized() const {
  return true;
}

void MongoUpdateReq::InternalSwap(MongoUpdateReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.col_name_, lhs_arena,
      &other->_impl_.col_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MongoUpdateReq, _impl_.user_data_)
      + sizeof(MongoUpdateReq::_impl_.user_data_)
      - PROTOBUF_FIELD_OFFSET(MongoUpdateReq, _impl_.selector_)>(
          reinterpret_cast<char*>(&_impl_.selector_),
          reinterpret_cast<char*>(&other->_impl_.selector_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoUpdateReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_5fmongo_5fproxy_2eproto_getter, &descriptor_table_db_5fmongo_5fproxy_2eproto_once,
      file_level_metadata_db_5fmongo_5fproxy_2eproto[9]);
}

// ===================================================================

class MongoUpdateRes::_Internal {
 public:
  static const ::DB::MongoUserData& user_data(const MongoUpdateRes* msg);
};

const ::DB::MongoUserData&
MongoUpdateRes::_Internal::user_data(const MongoUpdateRes* msg) {
  return *msg->_impl_.user_data_;
}
MongoUpdateRes::MongoUpdateRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DB.MongoUpdateRes)
}
MongoUpdateRes::MongoUpdateRes(const MongoUpdateRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MongoUpdateRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.succeed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_data()) {
    _this->_impl_.user_data_ = new ::DB::MongoUserData(*from._impl_.user_data_);
  }
  _this->_impl_.succeed_ = from._impl_.succeed_;
  // @@protoc_insertion_point(copy_constructor:DB.MongoUpdateRes)
}

inline void MongoUpdateRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.succeed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MongoUpdateRes::~MongoUpdateRes() {
  // @@protoc_insertion_point(destructor:DB.MongoUpdateRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MongoUpdateRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_data_;
}

void MongoUpdateRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MongoUpdateRes::Clear() {
// @@protoc_insertion_point(message_clear_start:DB.MongoUpdateRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_data_ != nullptr) {
    delete _impl_.user_data_;
  }
  _impl_.user_data_ = nullptr;
  _impl_.succeed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MongoUpdateRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool succeed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.succeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoUserData user_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MongoUpdateRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB.MongoUpdateRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool succeed = 1;
  if (this->_internal_succeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_succeed(), target);
  }

  // .DB.MongoUserData user_data = 2;
  if (this->_internal_has_user_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user_data(this),
        _Internal::user_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB.MongoUpdateRes)
  return target;
}

size_t MongoUpdateRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB.MongoUpdateRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DB.MongoUserData user_data = 2;
  if (this->_internal_has_user_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_data_);
  }

  // bool succeed = 1;
  if (this->_internal_succeed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MongoUpdateRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MongoUpdateRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MongoUpdateRes::GetClassData() const { return &_class_data_; }


void MongoUpdateRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MongoUpdateRes*>(&to_msg);
  auto& from = static_cast<const MongoUpdateRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DB.MongoUpdateRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_data()) {
    _this->_internal_mutable_user_data()->::DB::MongoUserData::MergeFrom(
        from._internal_user_data());
  }
  if (from._internal_succeed() != 0) {
    _this->_internal_set_succeed(from._internal_succeed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MongoUpdateRes::CopyFrom(const MongoUpdateRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB.MongoUpdateRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoUpdateRes::IsInitialized() const {
  return true;
}

void MongoUpdateRes::InternalSwap(MongoUpdateRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MongoUpdateRes, _impl_.succeed_)
      + sizeof(MongoUpdateRes::_impl_.succeed_)
      - PROTOBUF_FIELD_OFFSET(MongoUpdateRes, _impl_.user_data_)>(
          reinterpret_cast<char*>(&_impl_.user_data_),
          reinterpret_cast<char*>(&other->_impl_.user_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoUpdateRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_5fmongo_5fproxy_2eproto_getter, &descriptor_table_db_5fmongo_5fproxy_2eproto_once,
      file_level_metadata_db_5fmongo_5fproxy_2eproto[10]);
}

// ===================================================================

class MongoFindReq::_Internal {
 public:
  static const ::DB::ProtoBsonObj& query(const MongoFindReq* msg);
  static const ::DB::ProtoBsonObj& fields(const MongoFindReq* msg);
  static const ::DB::MongoUserData& user_data(const MongoFindReq* msg);
};

const ::DB::ProtoBsonObj&
MongoFindReq::_Internal::query(const MongoFindReq* msg) {
  return *msg->_impl_.query_;
}
const ::DB::ProtoBsonObj&
MongoFindReq::_Internal::fields(const MongoFindReq* msg) {
  return *msg->_impl_.fields_;
}
const ::DB::MongoUserData&
MongoFindReq::_Internal::user_data(const MongoFindReq* msg) {
  return *msg->_impl_.user_data_;
}
MongoFindReq::MongoFindReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DB.MongoFindReq)
}
MongoFindReq::MongoFindReq(const MongoFindReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MongoFindReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.col_name_){}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.fields_){nullptr}
    , decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.logic_batch_num_){}
    , decltype(_impl_.skip_){}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.batch_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.col_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_col_name().empty()) {
    _this->_impl_.col_name_.Set(from._internal_col_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_query()) {
    _this->_impl_.query_ = new ::DB::ProtoBsonObj(*from._impl_.query_);
  }
  if (from._internal_has_fields()) {
    _this->_impl_.fields_ = new ::DB::ProtoBsonObj(*from._impl_.fields_);
  }
  if (from._internal_has_user_data()) {
    _this->_impl_.user_data_ = new ::DB::MongoUserData(*from._impl_.user_data_);
  }
  ::memcpy(&_impl_.logic_batch_num_, &from._impl_.logic_batch_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.batch_size_) -
    reinterpret_cast<char*>(&_impl_.logic_batch_num_)) + sizeof(_impl_.batch_size_));
  // @@protoc_insertion_point(copy_constructor:DB.MongoFindReq)
}

inline void MongoFindReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.col_name_){}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.fields_){nullptr}
    , decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.logic_batch_num_){0}
    , decltype(_impl_.skip_){0}
    , decltype(_impl_.limit_){0}
    , decltype(_impl_.batch_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.col_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MongoFindReq::~MongoFindReq() {
  // @@protoc_insertion_point(destructor:DB.MongoFindReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MongoFindReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.col_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.query_;
  if (this != internal_default_instance()) delete _impl_.fields_;
  if (this != internal_default_instance()) delete _impl_.user_data_;
}

void MongoFindReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MongoFindReq::Clear() {
// @@protoc_insertion_point(message_clear_start:DB.MongoFindReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.col_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.query_ != nullptr) {
    delete _impl_.query_;
  }
  _impl_.query_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fields_ != nullptr) {
    delete _impl_.fields_;
  }
  _impl_.fields_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.user_data_ != nullptr) {
    delete _impl_.user_data_;
  }
  _impl_.user_data_ = nullptr;
  ::memset(&_impl_.logic_batch_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.batch_size_) -
      reinterpret_cast<char*>(&_impl_.logic_batch_num_)) + sizeof(_impl_.batch_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MongoFindReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DB.MongoFindReq.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string col_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_col_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DB.MongoFindReq.col_name"));
        } else
          goto handle_unusual;
        continue;
      // .DB.ProtoBsonObj query = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.ProtoBsonObj fields = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fields(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 logic_batch_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.logic_batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 skip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 batch_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoUserData user_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MongoFindReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB.MongoFindReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.MongoFindReq.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string col_name = 2;
  if (!this->_internal_col_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col_name().data(), static_cast<int>(this->_internal_col_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.MongoFindReq.col_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_col_name(), target);
  }

  // .DB.ProtoBsonObj query = 3;
  if (this->_internal_has_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::query(this),
        _Internal::query(this).GetCachedSize(), target, stream);
  }

  // .DB.ProtoBsonObj fields = 4;
  if (this->_internal_has_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::fields(this),
        _Internal::fields(this).GetCachedSize(), target, stream);
  }

  // int32 logic_batch_num = 5;
  if (this->_internal_logic_batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_logic_batch_num(), target);
  }

  // int32 skip = 6;
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_skip(), target);
  }

  // int32 limit = 7;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_limit(), target);
  }

  // int32 batch_size = 8;
  if (this->_internal_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_batch_size(), target);
  }

  // .DB.MongoUserData user_data = 9;
  if (this->_internal_has_user_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::user_data(this),
        _Internal::user_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB.MongoFindReq)
  return target;
}

size_t MongoFindReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB.MongoFindReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string col_name = 2;
  if (!this->_internal_col_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_col_name());
  }

  // .DB.ProtoBsonObj query = 3;
  if (this->_internal_has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.query_);
  }

  // .DB.ProtoBsonObj fields = 4;
  if (this->_internal_has_fields()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fields_);
  }

  // .DB.MongoUserData user_data = 9;
  if (this->_internal_has_user_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_data_);
  }

  // int32 logic_batch_num = 5;
  if (this->_internal_logic_batch_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_logic_batch_num());
  }

  // int32 skip = 6;
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_skip());
  }

  // int32 limit = 7;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  // int32 batch_size = 8;
  if (this->_internal_batch_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_batch_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MongoFindReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MongoFindReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MongoFindReq::GetClassData() const { return &_class_data_; }


void MongoFindReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MongoFindReq*>(&to_msg);
  auto& from = static_cast<const MongoFindReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DB.MongoFindReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_col_name().empty()) {
    _this->_internal_set_col_name(from._internal_col_name());
  }
  if (from._internal_has_query()) {
    _this->_internal_mutable_query()->::DB::ProtoBsonObj::MergeFrom(
        from._internal_query());
  }
  if (from._internal_has_fields()) {
    _this->_internal_mutable_fields()->::DB::ProtoBsonObj::MergeFrom(
        from._internal_fields());
  }
  if (from._internal_has_user_data()) {
    _this->_internal_mutable_user_data()->::DB::MongoUserData::MergeFrom(
        from._internal_user_data());
  }
  if (from._internal_logic_batch_num() != 0) {
    _this->_internal_set_logic_batch_num(from._internal_logic_batch_num());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_batch_size() != 0) {
    _this->_internal_set_batch_size(from._internal_batch_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MongoFindReq::CopyFrom(const MongoFindReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB.MongoFindReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoFindReq::IsInitialized() const {
  return true;
}

void MongoFindReq::InternalSwap(MongoFindReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.col_name_, lhs_arena,
      &other->_impl_.col_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MongoFindReq, _impl_.batch_size_)
      + sizeof(MongoFindReq::_impl_.batch_size_)
      - PROTOBUF_FIELD_OFFSET(MongoFindReq, _impl_.query_)>(
          reinterpret_cast<char*>(&_impl_.query_),
          reinterpret_cast<char*>(&other->_impl_.query_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoFindReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_5fmongo_5fproxy_2eproto_getter, &descriptor_table_db_5fmongo_5fproxy_2eproto_once,
      file_level_metadata_db_5fmongo_5fproxy_2eproto[11]);
}

// ===================================================================

class MongoFindRes::_Internal {
 public:
  static const ::DB::MongoUserData& user_data(const MongoFindRes* msg);
};

const ::DB::MongoUserData&
MongoFindRes::_Internal::user_data(const MongoFindRes* msg) {
  return *msg->_impl_.user_data_;
}
MongoFindRes::MongoFindRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DB.MongoFindRes)
}
MongoFindRes::MongoFindRes(const MongoFindRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MongoFindRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_}
    , decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.succeed_){}
    , decltype(_impl_.has_more_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_data()) {
    _this->_impl_.user_data_ = new ::DB::MongoUserData(*from._impl_.user_data_);
  }
  ::memcpy(&_impl_.succeed_, &from._impl_.succeed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_more_) -
    reinterpret_cast<char*>(&_impl_.succeed_)) + sizeof(_impl_.has_more_));
  // @@protoc_insertion_point(copy_constructor:DB.MongoFindRes)
}

inline void MongoFindRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena}
    , decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.succeed_){false}
    , decltype(_impl_.has_more_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MongoFindRes::~MongoFindRes() {
  // @@protoc_insertion_point(destructor:DB.MongoFindRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MongoFindRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_data_;
}

void MongoFindRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MongoFindRes::Clear() {
// @@protoc_insertion_point(message_clear_start:DB.MongoFindRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_data_ != nullptr) {
    delete _impl_.user_data_;
  }
  _impl_.user_data_ = nullptr;
  ::memset(&_impl_.succeed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.has_more_) -
      reinterpret_cast<char*>(&_impl_.succeed_)) + sizeof(_impl_.has_more_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MongoFindRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool succeed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.succeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_more = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.has_more_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .DB.ProtoBsonObj data_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoUserData user_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MongoFindRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB.MongoFindRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool succeed = 1;
  if (this->_internal_succeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_succeed(), target);
  }

  // bool has_more = 2;
  if (this->_internal_has_more() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_has_more(), target);
  }

  // repeated .DB.ProtoBsonObj data_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .DB.MongoUserData user_data = 4;
  if (this->_internal_has_user_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::user_data(this),
        _Internal::user_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB.MongoFindRes)
  return target;
}

size_t MongoFindRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB.MongoFindRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DB.ProtoBsonObj data_list = 3;
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_impl_.data_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DB.MongoUserData user_data = 4;
  if (this->_internal_has_user_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_data_);
  }

  // bool succeed = 1;
  if (this->_internal_succeed() != 0) {
    total_size += 1 + 1;
  }

  // bool has_more = 2;
  if (this->_internal_has_more() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MongoFindRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MongoFindRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MongoFindRes::GetClassData() const { return &_class_data_; }


void MongoFindRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MongoFindRes*>(&to_msg);
  auto& from = static_cast<const MongoFindRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DB.MongoFindRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_list_.MergeFrom(from._impl_.data_list_);
  if (from._internal_has_user_data()) {
    _this->_internal_mutable_user_data()->::DB::MongoUserData::MergeFrom(
        from._internal_user_data());
  }
  if (from._internal_succeed() != 0) {
    _this->_internal_set_succeed(from._internal_succeed());
  }
  if (from._internal_has_more() != 0) {
    _this->_internal_set_has_more(from._internal_has_more());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MongoFindRes::CopyFrom(const MongoFindRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB.MongoFindRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoFindRes::IsInitialized() const {
  return true;
}

void MongoFindRes::InternalSwap(MongoFindRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MongoFindRes, _impl_.has_more_)
      + sizeof(MongoFindRes::_impl_.has_more_)
      - PROTOBUF_FIELD_OFFSET(MongoFindRes, _impl_.user_data_)>(
          reinterpret_cast<char*>(&_impl_.user_data_),
          reinterpret_cast<char*>(&other->_impl_.user_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoFindRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_5fmongo_5fproxy_2eproto_getter, &descriptor_table_db_5fmongo_5fproxy_2eproto_once,
      file_level_metadata_db_5fmongo_5fproxy_2eproto[12]);
}

// ===================================================================

class ProtoBsonBatchFindData::_Internal {
 public:
};

ProtoBsonBatchFindData::ProtoBsonBatchFindData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DB.ProtoBsonBatchFindData)
}
ProtoBsonBatchFindData::ProtoBsonBatchFindData(const ProtoBsonBatchFindData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtoBsonBatchFindData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.int32_var_list_){from._impl_.int32_var_list_}
    , /*decltype(_impl_._int32_var_list_cached_byte_size_)*/{0}
    , decltype(_impl_.int64_var_list_){from._impl_.int64_var_list_}
    , /*decltype(_impl_._int64_var_list_cached_byte_size_)*/{0}
    , decltype(_impl_.string_var_list_){from._impl_.string_var_list_}
    , decltype(_impl_.key_){}
    , decltype(_impl_.data_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.data_type_ = from._impl_.data_type_;
  // @@protoc_insertion_point(copy_constructor:DB.ProtoBsonBatchFindData)
}

inline void ProtoBsonBatchFindData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.int32_var_list_){arena}
    , /*decltype(_impl_._int32_var_list_cached_byte_size_)*/{0}
    , decltype(_impl_.int64_var_list_){arena}
    , /*decltype(_impl_._int64_var_list_cached_byte_size_)*/{0}
    , decltype(_impl_.string_var_list_){arena}
    , decltype(_impl_.key_){}
    , decltype(_impl_.data_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProtoBsonBatchFindData::~ProtoBsonBatchFindData() {
  // @@protoc_insertion_point(destructor:DB.ProtoBsonBatchFindData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtoBsonBatchFindData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.int32_var_list_.~RepeatedField();
  _impl_.int64_var_list_.~RepeatedField();
  _impl_.string_var_list_.~RepeatedPtrField();
  _impl_.key_.Destroy();
}

void ProtoBsonBatchFindData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtoBsonBatchFindData::Clear() {
// @@protoc_insertion_point(message_clear_start:DB.ProtoBsonBatchFindData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.int32_var_list_.Clear();
  _impl_.int64_var_list_.Clear();
  _impl_.string_var_list_.Clear();
  _impl_.key_.ClearToEmpty();
  _impl_.data_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoBsonBatchFindData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DB.ProtoBsonBatchFindData.key"));
        } else
          goto handle_unusual;
        continue;
      // int32 data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.data_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 int32_var_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int32_var_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_int32_var_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 int64_var_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_int64_var_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_int64_var_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string string_var_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string_var_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "DB.ProtoBsonBatchFindData.string_var_list"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoBsonBatchFindData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB.ProtoBsonBatchFindData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.ProtoBsonBatchFindData.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int32 data_type = 2;
  if (this->_internal_data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_data_type(), target);
  }

  // repeated int32 int32_var_list = 3;
  {
    int byte_size = _impl_._int32_var_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_int32_var_list(), byte_size, target);
    }
  }

  // repeated int64 int64_var_list = 4;
  {
    int byte_size = _impl_._int64_var_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_int64_var_list(), byte_size, target);
    }
  }

  // repeated string string_var_list = 5;
  for (int i = 0, n = this->_internal_string_var_list_size(); i < n; i++) {
    const auto& s = this->_internal_string_var_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.ProtoBsonBatchFindData.string_var_list");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB.ProtoBsonBatchFindData)
  return target;
}

size_t ProtoBsonBatchFindData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB.ProtoBsonBatchFindData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 int32_var_list = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.int32_var_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._int32_var_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 int64_var_list = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.int64_var_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._int64_var_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string string_var_list = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.string_var_list_.size());
  for (int i = 0, n = _impl_.string_var_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.string_var_list_.Get(i));
  }

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 data_type = 2;
  if (this->_internal_data_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoBsonBatchFindData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtoBsonBatchFindData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoBsonBatchFindData::GetClassData() const { return &_class_data_; }


void ProtoBsonBatchFindData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtoBsonBatchFindData*>(&to_msg);
  auto& from = static_cast<const ProtoBsonBatchFindData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DB.ProtoBsonBatchFindData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.int32_var_list_.MergeFrom(from._impl_.int32_var_list_);
  _this->_impl_.int64_var_list_.MergeFrom(from._impl_.int64_var_list_);
  _this->_impl_.string_var_list_.MergeFrom(from._impl_.string_var_list_);
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_data_type() != 0) {
    _this->_internal_set_data_type(from._internal_data_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoBsonBatchFindData::CopyFrom(const ProtoBsonBatchFindData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB.ProtoBsonBatchFindData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBsonBatchFindData::IsInitialized() const {
  return true;
}

void ProtoBsonBatchFindData::InternalSwap(ProtoBsonBatchFindData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.int32_var_list_.InternalSwap(&other->_impl_.int32_var_list_);
  _impl_.int64_var_list_.InternalSwap(&other->_impl_.int64_var_list_);
  _impl_.string_var_list_.InternalSwap(&other->_impl_.string_var_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.data_type_, other->_impl_.data_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoBsonBatchFindData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_5fmongo_5fproxy_2eproto_getter, &descriptor_table_db_5fmongo_5fproxy_2eproto_once,
      file_level_metadata_db_5fmongo_5fproxy_2eproto[13]);
}

// ===================================================================

class MongoBatchFindReq::_Internal {
 public:
  static const ::DB::ProtoBsonBatchFindData& query(const MongoBatchFindReq* msg);
  static const ::DB::ProtoBsonObj& fields(const MongoBatchFindReq* msg);
  static const ::DB::MongoUserData& user_data(const MongoBatchFindReq* msg);
};

const ::DB::ProtoBsonBatchFindData&
MongoBatchFindReq::_Internal::query(const MongoBatchFindReq* msg) {
  return *msg->_impl_.query_;
}
const ::DB::ProtoBsonObj&
MongoBatchFindReq::_Internal::fields(const MongoBatchFindReq* msg) {
  return *msg->_impl_.fields_;
}
const ::DB::MongoUserData&
MongoBatchFindReq::_Internal::user_data(const MongoBatchFindReq* msg) {
  return *msg->_impl_.user_data_;
}
MongoBatchFindReq::MongoBatchFindReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DB.MongoBatchFindReq)
}
MongoBatchFindReq::MongoBatchFindReq(const MongoBatchFindReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MongoBatchFindReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.col_name_){}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.fields_){nullptr}
    , decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.logic_batch_num_){}
    , decltype(_impl_.skip_){}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.batch_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.col_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_col_name().empty()) {
    _this->_impl_.col_name_.Set(from._internal_col_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_query()) {
    _this->_impl_.query_ = new ::DB::ProtoBsonBatchFindData(*from._impl_.query_);
  }
  if (from._internal_has_fields()) {
    _this->_impl_.fields_ = new ::DB::ProtoBsonObj(*from._impl_.fields_);
  }
  if (from._internal_has_user_data()) {
    _this->_impl_.user_data_ = new ::DB::MongoUserData(*from._impl_.user_data_);
  }
  ::memcpy(&_impl_.logic_batch_num_, &from._impl_.logic_batch_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.batch_size_) -
    reinterpret_cast<char*>(&_impl_.logic_batch_num_)) + sizeof(_impl_.batch_size_));
  // @@protoc_insertion_point(copy_constructor:DB.MongoBatchFindReq)
}

inline void MongoBatchFindReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_name_){}
    , decltype(_impl_.col_name_){}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.fields_){nullptr}
    , decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.logic_batch_num_){0}
    , decltype(_impl_.skip_){0}
    , decltype(_impl_.limit_){0}
    , decltype(_impl_.batch_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.col_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MongoBatchFindReq::~MongoBatchFindReq() {
  // @@protoc_insertion_point(destructor:DB.MongoBatchFindReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MongoBatchFindReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_name_.Destroy();
  _impl_.col_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.query_;
  if (this != internal_default_instance()) delete _impl_.fields_;
  if (this != internal_default_instance()) delete _impl_.user_data_;
}

void MongoBatchFindReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MongoBatchFindReq::Clear() {
// @@protoc_insertion_point(message_clear_start:DB.MongoBatchFindReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_name_.ClearToEmpty();
  _impl_.col_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.query_ != nullptr) {
    delete _impl_.query_;
  }
  _impl_.query_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fields_ != nullptr) {
    delete _impl_.fields_;
  }
  _impl_.fields_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.user_data_ != nullptr) {
    delete _impl_.user_data_;
  }
  _impl_.user_data_ = nullptr;
  ::memset(&_impl_.logic_batch_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.batch_size_) -
      reinterpret_cast<char*>(&_impl_.logic_batch_num_)) + sizeof(_impl_.batch_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MongoBatchFindReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DB.MongoBatchFindReq.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string col_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_col_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DB.MongoBatchFindReq.col_name"));
        } else
          goto handle_unusual;
        continue;
      // .DB.ProtoBsonBatchFindData query = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.ProtoBsonObj fields = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fields(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 logic_batch_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.logic_batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 skip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 batch_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoUserData user_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MongoBatchFindReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB.MongoBatchFindReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.MongoBatchFindReq.db_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_name(), target);
  }

  // string col_name = 2;
  if (!this->_internal_col_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col_name().data(), static_cast<int>(this->_internal_col_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DB.MongoBatchFindReq.col_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_col_name(), target);
  }

  // .DB.ProtoBsonBatchFindData query = 3;
  if (this->_internal_has_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::query(this),
        _Internal::query(this).GetCachedSize(), target, stream);
  }

  // .DB.ProtoBsonObj fields = 4;
  if (this->_internal_has_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::fields(this),
        _Internal::fields(this).GetCachedSize(), target, stream);
  }

  // int32 logic_batch_num = 5;
  if (this->_internal_logic_batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_logic_batch_num(), target);
  }

  // int32 skip = 6;
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_skip(), target);
  }

  // int32 limit = 7;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_limit(), target);
  }

  // int32 batch_size = 8;
  if (this->_internal_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_batch_size(), target);
  }

  // .DB.MongoUserData user_data = 9;
  if (this->_internal_has_user_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::user_data(this),
        _Internal::user_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB.MongoBatchFindReq)
  return target;
}

size_t MongoBatchFindReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB.MongoBatchFindReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 1;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string col_name = 2;
  if (!this->_internal_col_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_col_name());
  }

  // .DB.ProtoBsonBatchFindData query = 3;
  if (this->_internal_has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.query_);
  }

  // .DB.ProtoBsonObj fields = 4;
  if (this->_internal_has_fields()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fields_);
  }

  // .DB.MongoUserData user_data = 9;
  if (this->_internal_has_user_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_data_);
  }

  // int32 logic_batch_num = 5;
  if (this->_internal_logic_batch_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_logic_batch_num());
  }

  // int32 skip = 6;
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_skip());
  }

  // int32 limit = 7;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  // int32 batch_size = 8;
  if (this->_internal_batch_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_batch_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MongoBatchFindReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MongoBatchFindReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MongoBatchFindReq::GetClassData() const { return &_class_data_; }


void MongoBatchFindReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MongoBatchFindReq*>(&to_msg);
  auto& from = static_cast<const MongoBatchFindReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DB.MongoBatchFindReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_col_name().empty()) {
    _this->_internal_set_col_name(from._internal_col_name());
  }
  if (from._internal_has_query()) {
    _this->_internal_mutable_query()->::DB::ProtoBsonBatchFindData::MergeFrom(
        from._internal_query());
  }
  if (from._internal_has_fields()) {
    _this->_internal_mutable_fields()->::DB::ProtoBsonObj::MergeFrom(
        from._internal_fields());
  }
  if (from._internal_has_user_data()) {
    _this->_internal_mutable_user_data()->::DB::MongoUserData::MergeFrom(
        from._internal_user_data());
  }
  if (from._internal_logic_batch_num() != 0) {
    _this->_internal_set_logic_batch_num(from._internal_logic_batch_num());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_batch_size() != 0) {
    _this->_internal_set_batch_size(from._internal_batch_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MongoBatchFindReq::CopyFrom(const MongoBatchFindReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB.MongoBatchFindReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoBatchFindReq::IsInitialized() const {
  return true;
}

void MongoBatchFindReq::InternalSwap(MongoBatchFindReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.col_name_, lhs_arena,
      &other->_impl_.col_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MongoBatchFindReq, _impl_.batch_size_)
      + sizeof(MongoBatchFindReq::_impl_.batch_size_)
      - PROTOBUF_FIELD_OFFSET(MongoBatchFindReq, _impl_.query_)>(
          reinterpret_cast<char*>(&_impl_.query_),
          reinterpret_cast<char*>(&other->_impl_.query_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoBatchFindReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_5fmongo_5fproxy_2eproto_getter, &descriptor_table_db_5fmongo_5fproxy_2eproto_once,
      file_level_metadata_db_5fmongo_5fproxy_2eproto[14]);
}

// ===================================================================

class MongoBatchFindRes::_Internal {
 public:
  static const ::DB::MongoUserData& user_data(const MongoBatchFindRes* msg);
};

const ::DB::MongoUserData&
MongoBatchFindRes::_Internal::user_data(const MongoBatchFindRes* msg) {
  return *msg->_impl_.user_data_;
}
MongoBatchFindRes::MongoBatchFindRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DB.MongoBatchFindRes)
}
MongoBatchFindRes::MongoBatchFindRes(const MongoBatchFindRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MongoBatchFindRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){from._impl_.data_list_}
    , decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.succeed_){}
    , decltype(_impl_.has_more_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_data()) {
    _this->_impl_.user_data_ = new ::DB::MongoUserData(*from._impl_.user_data_);
  }
  ::memcpy(&_impl_.succeed_, &from._impl_.succeed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_more_) -
    reinterpret_cast<char*>(&_impl_.succeed_)) + sizeof(_impl_.has_more_));
  // @@protoc_insertion_point(copy_constructor:DB.MongoBatchFindRes)
}

inline void MongoBatchFindRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_list_){arena}
    , decltype(_impl_.user_data_){nullptr}
    , decltype(_impl_.succeed_){false}
    , decltype(_impl_.has_more_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MongoBatchFindRes::~MongoBatchFindRes() {
  // @@protoc_insertion_point(destructor:DB.MongoBatchFindRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MongoBatchFindRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_data_;
}

void MongoBatchFindRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MongoBatchFindRes::Clear() {
// @@protoc_insertion_point(message_clear_start:DB.MongoBatchFindRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_list_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_data_ != nullptr) {
    delete _impl_.user_data_;
  }
  _impl_.user_data_ = nullptr;
  ::memset(&_impl_.succeed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.has_more_) -
      reinterpret_cast<char*>(&_impl_.succeed_)) + sizeof(_impl_.has_more_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MongoBatchFindRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool succeed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.succeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_more = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.has_more_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .DB.ProtoBsonObj data_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoUserData user_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MongoBatchFindRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB.MongoBatchFindRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool succeed = 1;
  if (this->_internal_succeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_succeed(), target);
  }

  // bool has_more = 2;
  if (this->_internal_has_more() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_has_more(), target);
  }

  // repeated .DB.ProtoBsonObj data_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .DB.MongoUserData user_data = 4;
  if (this->_internal_has_user_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::user_data(this),
        _Internal::user_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB.MongoBatchFindRes)
  return target;
}

size_t MongoBatchFindRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB.MongoBatchFindRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DB.ProtoBsonObj data_list = 3;
  total_size += 1UL * this->_internal_data_list_size();
  for (const auto& msg : this->_impl_.data_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DB.MongoUserData user_data = 4;
  if (this->_internal_has_user_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_data_);
  }

  // bool succeed = 1;
  if (this->_internal_succeed() != 0) {
    total_size += 1 + 1;
  }

  // bool has_more = 2;
  if (this->_internal_has_more() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MongoBatchFindRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MongoBatchFindRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MongoBatchFindRes::GetClassData() const { return &_class_data_; }


void MongoBatchFindRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MongoBatchFindRes*>(&to_msg);
  auto& from = static_cast<const MongoBatchFindRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DB.MongoBatchFindRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_list_.MergeFrom(from._impl_.data_list_);
  if (from._internal_has_user_data()) {
    _this->_internal_mutable_user_data()->::DB::MongoUserData::MergeFrom(
        from._internal_user_data());
  }
  if (from._internal_succeed() != 0) {
    _this->_internal_set_succeed(from._internal_succeed());
  }
  if (from._internal_has_more() != 0) {
    _this->_internal_set_has_more(from._internal_has_more());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MongoBatchFindRes::CopyFrom(const MongoBatchFindRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB.MongoBatchFindRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoBatchFindRes::IsInitialized() const {
  return true;
}

void MongoBatchFindRes::InternalSwap(MongoBatchFindRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_list_.InternalSwap(&other->_impl_.data_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MongoBatchFindRes, _impl_.has_more_)
      + sizeof(MongoBatchFindRes::_impl_.has_more_)
      - PROTOBUF_FIELD_OFFSET(MongoBatchFindRes, _impl_.user_data_)>(
          reinterpret_cast<char*>(&_impl_.user_data_),
          reinterpret_cast<char*>(&other->_impl_.user_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoBatchFindRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_5fmongo_5fproxy_2eproto_getter, &descriptor_table_db_5fmongo_5fproxy_2eproto_once,
      file_level_metadata_db_5fmongo_5fproxy_2eproto[15]);
}

// ===================================================================

class MongoDBMsg::_Internal {
 public:
  static const ::DB::MongoInsertReq& insert_req(const MongoDBMsg* msg);
  static const ::DB::MongoInsertRes& insert_res(const MongoDBMsg* msg);
  static const ::DB::MongoRemoveReq& remove_req(const MongoDBMsg* msg);
  static const ::DB::MongoRemoveRes& remove_res(const MongoDBMsg* msg);
  static const ::DB::MongoSaveReq& save_req(const MongoDBMsg* msg);
  static const ::DB::MongoSaveRes& save_res(const MongoDBMsg* msg);
  static const ::DB::MongoUpdateReq& update_req(const MongoDBMsg* msg);
  static const ::DB::MongoUpdateRes& update_res(const MongoDBMsg* msg);
  static const ::DB::MongoFindReq& find_req(const MongoDBMsg* msg);
  static const ::DB::MongoFindRes& find_res(const MongoDBMsg* msg);
  static const ::DB::MongoBatchFindReq& batch_find_req(const MongoDBMsg* msg);
  static const ::DB::MongoBatchFindRes& batch_find_res(const MongoDBMsg* msg);
};

const ::DB::MongoInsertReq&
MongoDBMsg::_Internal::insert_req(const MongoDBMsg* msg) {
  return *msg->_impl_.insert_req_;
}
const ::DB::MongoInsertRes&
MongoDBMsg::_Internal::insert_res(const MongoDBMsg* msg) {
  return *msg->_impl_.insert_res_;
}
const ::DB::MongoRemoveReq&
MongoDBMsg::_Internal::remove_req(const MongoDBMsg* msg) {
  return *msg->_impl_.remove_req_;
}
const ::DB::MongoRemoveRes&
MongoDBMsg::_Internal::remove_res(const MongoDBMsg* msg) {
  return *msg->_impl_.remove_res_;
}
const ::DB::MongoSaveReq&
MongoDBMsg::_Internal::save_req(const MongoDBMsg* msg) {
  return *msg->_impl_.save_req_;
}
const ::DB::MongoSaveRes&
MongoDBMsg::_Internal::save_res(const MongoDBMsg* msg) {
  return *msg->_impl_.save_res_;
}
const ::DB::MongoUpdateReq&
MongoDBMsg::_Internal::update_req(const MongoDBMsg* msg) {
  return *msg->_impl_.update_req_;
}
const ::DB::MongoUpdateRes&
MongoDBMsg::_Internal::update_res(const MongoDBMsg* msg) {
  return *msg->_impl_.update_res_;
}
const ::DB::MongoFindReq&
MongoDBMsg::_Internal::find_req(const MongoDBMsg* msg) {
  return *msg->_impl_.find_req_;
}
const ::DB::MongoFindRes&
MongoDBMsg::_Internal::find_res(const MongoDBMsg* msg) {
  return *msg->_impl_.find_res_;
}
const ::DB::MongoBatchFindReq&
MongoDBMsg::_Internal::batch_find_req(const MongoDBMsg* msg) {
  return *msg->_impl_.batch_find_req_;
}
const ::DB::MongoBatchFindRes&
MongoDBMsg::_Internal::batch_find_res(const MongoDBMsg* msg) {
  return *msg->_impl_.batch_find_res_;
}
MongoDBMsg::MongoDBMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DB.MongoDBMsg)
}
MongoDBMsg::MongoDBMsg(const MongoDBMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MongoDBMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.insert_req_){nullptr}
    , decltype(_impl_.insert_res_){nullptr}
    , decltype(_impl_.remove_req_){nullptr}
    , decltype(_impl_.remove_res_){nullptr}
    , decltype(_impl_.save_req_){nullptr}
    , decltype(_impl_.save_res_){nullptr}
    , decltype(_impl_.update_req_){nullptr}
    , decltype(_impl_.update_res_){nullptr}
    , decltype(_impl_.find_req_){nullptr}
    , decltype(_impl_.find_res_){nullptr}
    , decltype(_impl_.batch_find_req_){nullptr}
    , decltype(_impl_.batch_find_res_){nullptr}
    , decltype(_impl_.cmd_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_insert_req()) {
    _this->_impl_.insert_req_ = new ::DB::MongoInsertReq(*from._impl_.insert_req_);
  }
  if (from._internal_has_insert_res()) {
    _this->_impl_.insert_res_ = new ::DB::MongoInsertRes(*from._impl_.insert_res_);
  }
  if (from._internal_has_remove_req()) {
    _this->_impl_.remove_req_ = new ::DB::MongoRemoveReq(*from._impl_.remove_req_);
  }
  if (from._internal_has_remove_res()) {
    _this->_impl_.remove_res_ = new ::DB::MongoRemoveRes(*from._impl_.remove_res_);
  }
  if (from._internal_has_save_req()) {
    _this->_impl_.save_req_ = new ::DB::MongoSaveReq(*from._impl_.save_req_);
  }
  if (from._internal_has_save_res()) {
    _this->_impl_.save_res_ = new ::DB::MongoSaveRes(*from._impl_.save_res_);
  }
  if (from._internal_has_update_req()) {
    _this->_impl_.update_req_ = new ::DB::MongoUpdateReq(*from._impl_.update_req_);
  }
  if (from._internal_has_update_res()) {
    _this->_impl_.update_res_ = new ::DB::MongoUpdateRes(*from._impl_.update_res_);
  }
  if (from._internal_has_find_req()) {
    _this->_impl_.find_req_ = new ::DB::MongoFindReq(*from._impl_.find_req_);
  }
  if (from._internal_has_find_res()) {
    _this->_impl_.find_res_ = new ::DB::MongoFindRes(*from._impl_.find_res_);
  }
  if (from._internal_has_batch_find_req()) {
    _this->_impl_.batch_find_req_ = new ::DB::MongoBatchFindReq(*from._impl_.batch_find_req_);
  }
  if (from._internal_has_batch_find_res()) {
    _this->_impl_.batch_find_res_ = new ::DB::MongoBatchFindRes(*from._impl_.batch_find_res_);
  }
  _this->_impl_.cmd_type_ = from._impl_.cmd_type_;
  // @@protoc_insertion_point(copy_constructor:DB.MongoDBMsg)
}

inline void MongoDBMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.insert_req_){nullptr}
    , decltype(_impl_.insert_res_){nullptr}
    , decltype(_impl_.remove_req_){nullptr}
    , decltype(_impl_.remove_res_){nullptr}
    , decltype(_impl_.save_req_){nullptr}
    , decltype(_impl_.save_res_){nullptr}
    , decltype(_impl_.update_req_){nullptr}
    , decltype(_impl_.update_res_){nullptr}
    , decltype(_impl_.find_req_){nullptr}
    , decltype(_impl_.find_res_){nullptr}
    , decltype(_impl_.batch_find_req_){nullptr}
    , decltype(_impl_.batch_find_res_){nullptr}
    , decltype(_impl_.cmd_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MongoDBMsg::~MongoDBMsg() {
  // @@protoc_insertion_point(destructor:DB.MongoDBMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MongoDBMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.insert_req_;
  if (this != internal_default_instance()) delete _impl_.insert_res_;
  if (this != internal_default_instance()) delete _impl_.remove_req_;
  if (this != internal_default_instance()) delete _impl_.remove_res_;
  if (this != internal_default_instance()) delete _impl_.save_req_;
  if (this != internal_default_instance()) delete _impl_.save_res_;
  if (this != internal_default_instance()) delete _impl_.update_req_;
  if (this != internal_default_instance()) delete _impl_.update_res_;
  if (this != internal_default_instance()) delete _impl_.find_req_;
  if (this != internal_default_instance()) delete _impl_.find_res_;
  if (this != internal_default_instance()) delete _impl_.batch_find_req_;
  if (this != internal_default_instance()) delete _impl_.batch_find_res_;
}

void MongoDBMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MongoDBMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:DB.MongoDBMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.insert_req_ != nullptr) {
    delete _impl_.insert_req_;
  }
  _impl_.insert_req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insert_res_ != nullptr) {
    delete _impl_.insert_res_;
  }
  _impl_.insert_res_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.remove_req_ != nullptr) {
    delete _impl_.remove_req_;
  }
  _impl_.remove_req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.remove_res_ != nullptr) {
    delete _impl_.remove_res_;
  }
  _impl_.remove_res_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.save_req_ != nullptr) {
    delete _impl_.save_req_;
  }
  _impl_.save_req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.save_res_ != nullptr) {
    delete _impl_.save_res_;
  }
  _impl_.save_res_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.update_req_ != nullptr) {
    delete _impl_.update_req_;
  }
  _impl_.update_req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.update_res_ != nullptr) {
    delete _impl_.update_res_;
  }
  _impl_.update_res_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.find_req_ != nullptr) {
    delete _impl_.find_req_;
  }
  _impl_.find_req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.find_res_ != nullptr) {
    delete _impl_.find_res_;
  }
  _impl_.find_res_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.batch_find_req_ != nullptr) {
    delete _impl_.batch_find_req_;
  }
  _impl_.batch_find_req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.batch_find_res_ != nullptr) {
    delete _impl_.batch_find_res_;
  }
  _impl_.batch_find_res_ = nullptr;
  _impl_.cmd_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MongoDBMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cmd_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cmd_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoInsertReq insert_req = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoInsertRes insert_res = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoRemoveReq remove_req = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoRemoveRes remove_res = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoSaveReq save_req = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_save_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoSaveRes save_res = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_save_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoUpdateReq update_req = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoUpdateRes update_res = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoFindReq find_req = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_find_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoFindRes find_res = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_find_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoBatchFindReq batch_find_req = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch_find_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DB.MongoBatchFindRes batch_find_res = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch_find_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MongoDBMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DB.MongoDBMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cmd_type = 1;
  if (this->_internal_cmd_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd_type(), target);
  }

  // .DB.MongoInsertReq insert_req = 2;
  if (this->_internal_has_insert_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::insert_req(this),
        _Internal::insert_req(this).GetCachedSize(), target, stream);
  }

  // .DB.MongoInsertRes insert_res = 3;
  if (this->_internal_has_insert_res()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::insert_res(this),
        _Internal::insert_res(this).GetCachedSize(), target, stream);
  }

  // .DB.MongoRemoveReq remove_req = 4;
  if (this->_internal_has_remove_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::remove_req(this),
        _Internal::remove_req(this).GetCachedSize(), target, stream);
  }

  // .DB.MongoRemoveRes remove_res = 5;
  if (this->_internal_has_remove_res()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::remove_res(this),
        _Internal::remove_res(this).GetCachedSize(), target, stream);
  }

  // .DB.MongoSaveReq save_req = 6;
  if (this->_internal_has_save_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::save_req(this),
        _Internal::save_req(this).GetCachedSize(), target, stream);
  }

  // .DB.MongoSaveRes save_res = 7;
  if (this->_internal_has_save_res()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::save_res(this),
        _Internal::save_res(this).GetCachedSize(), target, stream);
  }

  // .DB.MongoUpdateReq update_req = 8;
  if (this->_internal_has_update_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::update_req(this),
        _Internal::update_req(this).GetCachedSize(), target, stream);
  }

  // .DB.MongoUpdateRes update_res = 9;
  if (this->_internal_has_update_res()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::update_res(this),
        _Internal::update_res(this).GetCachedSize(), target, stream);
  }

  // .DB.MongoFindReq find_req = 10;
  if (this->_internal_has_find_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::find_req(this),
        _Internal::find_req(this).GetCachedSize(), target, stream);
  }

  // .DB.MongoFindRes find_res = 11;
  if (this->_internal_has_find_res()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::find_res(this),
        _Internal::find_res(this).GetCachedSize(), target, stream);
  }

  // .DB.MongoBatchFindReq batch_find_req = 12;
  if (this->_internal_has_batch_find_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::batch_find_req(this),
        _Internal::batch_find_req(this).GetCachedSize(), target, stream);
  }

  // .DB.MongoBatchFindRes batch_find_res = 13;
  if (this->_internal_has_batch_find_res()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::batch_find_res(this),
        _Internal::batch_find_res(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DB.MongoDBMsg)
  return target;
}

size_t MongoDBMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DB.MongoDBMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DB.MongoInsertReq insert_req = 2;
  if (this->_internal_has_insert_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_req_);
  }

  // .DB.MongoInsertRes insert_res = 3;
  if (this->_internal_has_insert_res()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_res_);
  }

  // .DB.MongoRemoveReq remove_req = 4;
  if (this->_internal_has_remove_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remove_req_);
  }

  // .DB.MongoRemoveRes remove_res = 5;
  if (this->_internal_has_remove_res()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remove_res_);
  }

  // .DB.MongoSaveReq save_req = 6;
  if (this->_internal_has_save_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.save_req_);
  }

  // .DB.MongoSaveRes save_res = 7;
  if (this->_internal_has_save_res()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.save_res_);
  }

  // .DB.MongoUpdateReq update_req = 8;
  if (this->_internal_has_update_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_req_);
  }

  // .DB.MongoUpdateRes update_res = 9;
  if (this->_internal_has_update_res()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_res_);
  }

  // .DB.MongoFindReq find_req = 10;
  if (this->_internal_has_find_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.find_req_);
  }

  // .DB.MongoFindRes find_res = 11;
  if (this->_internal_has_find_res()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.find_res_);
  }

  // .DB.MongoBatchFindReq batch_find_req = 12;
  if (this->_internal_has_batch_find_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.batch_find_req_);
  }

  // .DB.MongoBatchFindRes batch_find_res = 13;
  if (this->_internal_has_batch_find_res()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.batch_find_res_);
  }

  // int32 cmd_type = 1;
  if (this->_internal_cmd_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cmd_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MongoDBMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MongoDBMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MongoDBMsg::GetClassData() const { return &_class_data_; }


void MongoDBMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MongoDBMsg*>(&to_msg);
  auto& from = static_cast<const MongoDBMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DB.MongoDBMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_insert_req()) {
    _this->_internal_mutable_insert_req()->::DB::MongoInsertReq::MergeFrom(
        from._internal_insert_req());
  }
  if (from._internal_has_insert_res()) {
    _this->_internal_mutable_insert_res()->::DB::MongoInsertRes::MergeFrom(
        from._internal_insert_res());
  }
  if (from._internal_has_remove_req()) {
    _this->_internal_mutable_remove_req()->::DB::MongoRemoveReq::MergeFrom(
        from._internal_remove_req());
  }
  if (from._internal_has_remove_res()) {
    _this->_internal_mutable_remove_res()->::DB::MongoRemoveRes::MergeFrom(
        from._internal_remove_res());
  }
  if (from._internal_has_save_req()) {
    _this->_internal_mutable_save_req()->::DB::MongoSaveReq::MergeFrom(
        from._internal_save_req());
  }
  if (from._internal_has_save_res()) {
    _this->_internal_mutable_save_res()->::DB::MongoSaveRes::MergeFrom(
        from._internal_save_res());
  }
  if (from._internal_has_update_req()) {
    _this->_internal_mutable_update_req()->::DB::MongoUpdateReq::MergeFrom(
        from._internal_update_req());
  }
  if (from._internal_has_update_res()) {
    _this->_internal_mutable_update_res()->::DB::MongoUpdateRes::MergeFrom(
        from._internal_update_res());
  }
  if (from._internal_has_find_req()) {
    _this->_internal_mutable_find_req()->::DB::MongoFindReq::MergeFrom(
        from._internal_find_req());
  }
  if (from._internal_has_find_res()) {
    _this->_internal_mutable_find_res()->::DB::MongoFindRes::MergeFrom(
        from._internal_find_res());
  }
  if (from._internal_has_batch_find_req()) {
    _this->_internal_mutable_batch_find_req()->::DB::MongoBatchFindReq::MergeFrom(
        from._internal_batch_find_req());
  }
  if (from._internal_has_batch_find_res()) {
    _this->_internal_mutable_batch_find_res()->::DB::MongoBatchFindRes::MergeFrom(
        from._internal_batch_find_res());
  }
  if (from._internal_cmd_type() != 0) {
    _this->_internal_set_cmd_type(from._internal_cmd_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MongoDBMsg::CopyFrom(const MongoDBMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DB.MongoDBMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoDBMsg::IsInitialized() const {
  return true;
}

void MongoDBMsg::InternalSwap(MongoDBMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MongoDBMsg, _impl_.cmd_type_)
      + sizeof(MongoDBMsg::_impl_.cmd_type_)
      - PROTOBUF_FIELD_OFFSET(MongoDBMsg, _impl_.insert_req_)>(
          reinterpret_cast<char*>(&_impl_.insert_req_),
          reinterpret_cast<char*>(&other->_impl_.insert_req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoDBMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_5fmongo_5fproxy_2eproto_getter, &descriptor_table_db_5fmongo_5fproxy_2eproto_once,
      file_level_metadata_db_5fmongo_5fproxy_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace DB
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DB::ProtoBsonData*
Arena::CreateMaybeMessage< ::DB::ProtoBsonData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB::ProtoBsonData >(arena);
}
template<> PROTOBUF_NOINLINE ::DB::ProtoBsonObj*
Arena::CreateMaybeMessage< ::DB::ProtoBsonObj >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB::ProtoBsonObj >(arena);
}
template<> PROTOBUF_NOINLINE ::DB::MongoUserData*
Arena::CreateMaybeMessage< ::DB::MongoUserData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB::MongoUserData >(arena);
}
template<> PROTOBUF_NOINLINE ::DB::MongoInsertReq*
Arena::CreateMaybeMessage< ::DB::MongoInsertReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB::MongoInsertReq >(arena);
}
template<> PROTOBUF_NOINLINE ::DB::MongoInsertRes*
Arena::CreateMaybeMessage< ::DB::MongoInsertRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB::MongoInsertRes >(arena);
}
template<> PROTOBUF_NOINLINE ::DB::MongoRemoveReq*
Arena::CreateMaybeMessage< ::DB::MongoRemoveReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB::MongoRemoveReq >(arena);
}
template<> PROTOBUF_NOINLINE ::DB::MongoRemoveRes*
Arena::CreateMaybeMessage< ::DB::MongoRemoveRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB::MongoRemoveRes >(arena);
}
template<> PROTOBUF_NOINLINE ::DB::MongoSaveReq*
Arena::CreateMaybeMessage< ::DB::MongoSaveReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB::MongoSaveReq >(arena);
}
template<> PROTOBUF_NOINLINE ::DB::MongoSaveRes*
Arena::CreateMaybeMessage< ::DB::MongoSaveRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB::MongoSaveRes >(arena);
}
template<> PROTOBUF_NOINLINE ::DB::MongoUpdateReq*
Arena::CreateMaybeMessage< ::DB::MongoUpdateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB::MongoUpdateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::DB::MongoUpdateRes*
Arena::CreateMaybeMessage< ::DB::MongoUpdateRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB::MongoUpdateRes >(arena);
}
template<> PROTOBUF_NOINLINE ::DB::MongoFindReq*
Arena::CreateMaybeMessage< ::DB::MongoFindReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB::MongoFindReq >(arena);
}
template<> PROTOBUF_NOINLINE ::DB::MongoFindRes*
Arena::CreateMaybeMessage< ::DB::MongoFindRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB::MongoFindRes >(arena);
}
template<> PROTOBUF_NOINLINE ::DB::ProtoBsonBatchFindData*
Arena::CreateMaybeMessage< ::DB::ProtoBsonBatchFindData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB::ProtoBsonBatchFindData >(arena);
}
template<> PROTOBUF_NOINLINE ::DB::MongoBatchFindReq*
Arena::CreateMaybeMessage< ::DB::MongoBatchFindReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB::MongoBatchFindReq >(arena);
}
template<> PROTOBUF_NOINLINE ::DB::MongoBatchFindRes*
Arena::CreateMaybeMessage< ::DB::MongoBatchFindRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB::MongoBatchFindRes >(arena);
}
template<> PROTOBUF_NOINLINE ::DB::MongoDBMsg*
Arena::CreateMaybeMessage< ::DB::MongoDBMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DB::MongoDBMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
