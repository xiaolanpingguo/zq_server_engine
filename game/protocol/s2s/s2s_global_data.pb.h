// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2s_global_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_s2s_5fglobal_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_s2s_5fglobal_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_s2s_5fglobal_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_s2s_5fglobal_5fdata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_s2s_5fglobal_5fdata_2eproto;
namespace S2S {
class S2SPlayerSessionData;
struct S2SPlayerSessionDataDefaultTypeInternal;
extern S2SPlayerSessionDataDefaultTypeInternal _S2SPlayerSessionData_default_instance_;
class S2SZoneServerData;
struct S2SZoneServerDataDefaultTypeInternal;
extern S2SZoneServerDataDefaultTypeInternal _S2SZoneServerData_default_instance_;
}  // namespace S2S
PROTOBUF_NAMESPACE_OPEN
template<> ::S2S::S2SPlayerSessionData* Arena::CreateMaybeMessage<::S2S::S2SPlayerSessionData>(Arena*);
template<> ::S2S::S2SZoneServerData* Arena::CreateMaybeMessage<::S2S::S2SZoneServerData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace S2S {

enum S2S_ONLINE_STATUS : int {
  NONE = 0,
  PROGRESS_ON_LOGIN_SERVER = 1,
  WAITTING_TO_LOGIN_ZONE = 2,
  ONLINE = 3,
  DISCONNTECTING = 4,
  OFFLINE = 5,
  S2S_ONLINE_STATUS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  S2S_ONLINE_STATUS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool S2S_ONLINE_STATUS_IsValid(int value);
constexpr S2S_ONLINE_STATUS S2S_ONLINE_STATUS_MIN = NONE;
constexpr S2S_ONLINE_STATUS S2S_ONLINE_STATUS_MAX = OFFLINE;
constexpr int S2S_ONLINE_STATUS_ARRAYSIZE = S2S_ONLINE_STATUS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* S2S_ONLINE_STATUS_descriptor();
template<typename T>
inline const std::string& S2S_ONLINE_STATUS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, S2S_ONLINE_STATUS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function S2S_ONLINE_STATUS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    S2S_ONLINE_STATUS_descriptor(), enum_t_value);
}
inline bool S2S_ONLINE_STATUS_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, S2S_ONLINE_STATUS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<S2S_ONLINE_STATUS>(
    S2S_ONLINE_STATUS_descriptor(), name, value);
}
// ===================================================================

class S2SPlayerSessionData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:S2S.S2SPlayerSessionData) */ {
 public:
  inline S2SPlayerSessionData() : S2SPlayerSessionData(nullptr) {}
  ~S2SPlayerSessionData() override;
  explicit PROTOBUF_CONSTEXPR S2SPlayerSessionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2SPlayerSessionData(const S2SPlayerSessionData& from);
  S2SPlayerSessionData(S2SPlayerSessionData&& from) noexcept
    : S2SPlayerSessionData() {
    *this = ::std::move(from);
  }

  inline S2SPlayerSessionData& operator=(const S2SPlayerSessionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2SPlayerSessionData& operator=(S2SPlayerSessionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2SPlayerSessionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2SPlayerSessionData* internal_default_instance() {
    return reinterpret_cast<const S2SPlayerSessionData*>(
               &_S2SPlayerSessionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S2SPlayerSessionData& a, S2SPlayerSessionData& b) {
    a.Swap(&b);
  }
  inline void Swap(S2SPlayerSessionData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2SPlayerSessionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2SPlayerSessionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2SPlayerSessionData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2SPlayerSessionData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2SPlayerSessionData& from) {
    S2SPlayerSessionData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SPlayerSessionData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "S2S.S2SPlayerSessionData";
  }
  protected:
  explicit S2SPlayerSessionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSdkUserIdFieldNumber = 1,
    kSdkTokenFieldNumber = 2,
    kProfileIdFieldNumber = 4,
    kLoginTokenFieldNumber = 7,
    kAppIdFieldNumber = 8,
    kIpFieldNumber = 9,
    kChannelIdFieldNumber = 3,
    kOnlineStatusFieldNumber = 5,
    kLoginTimeFieldNumber = 6,
    kPortFieldNumber = 10,
  };
  // string sdk_user_id = 1;
  void clear_sdk_user_id();
  const std::string& sdk_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdk_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdk_user_id();
  PROTOBUF_NODISCARD std::string* release_sdk_user_id();
  void set_allocated_sdk_user_id(std::string* sdk_user_id);
  private:
  const std::string& _internal_sdk_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdk_user_id(const std::string& value);
  std::string* _internal_mutable_sdk_user_id();
  public:

  // string sdk_token = 2;
  void clear_sdk_token();
  const std::string& sdk_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdk_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdk_token();
  PROTOBUF_NODISCARD std::string* release_sdk_token();
  void set_allocated_sdk_token(std::string* sdk_token);
  private:
  const std::string& _internal_sdk_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdk_token(const std::string& value);
  std::string* _internal_mutable_sdk_token();
  public:

  // string profile_id = 4;
  void clear_profile_id();
  const std::string& profile_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_profile_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_profile_id();
  PROTOBUF_NODISCARD std::string* release_profile_id();
  void set_allocated_profile_id(std::string* profile_id);
  private:
  const std::string& _internal_profile_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile_id(const std::string& value);
  std::string* _internal_mutable_profile_id();
  public:

  // string login_token = 7;
  void clear_login_token();
  const std::string& login_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login_token();
  PROTOBUF_NODISCARD std::string* release_login_token();
  void set_allocated_login_token(std::string* login_token);
  private:
  const std::string& _internal_login_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login_token(const std::string& value);
  std::string* _internal_mutable_login_token();
  public:

  // string app_id = 8;
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string ip = 9;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 channel_id = 3;
  void clear_channel_id();
  int32_t channel_id() const;
  void set_channel_id(int32_t value);
  private:
  int32_t _internal_channel_id() const;
  void _internal_set_channel_id(int32_t value);
  public:

  // .S2S.S2S_ONLINE_STATUS online_status = 5;
  void clear_online_status();
  ::S2S::S2S_ONLINE_STATUS online_status() const;
  void set_online_status(::S2S::S2S_ONLINE_STATUS value);
  private:
  ::S2S::S2S_ONLINE_STATUS _internal_online_status() const;
  void _internal_set_online_status(::S2S::S2S_ONLINE_STATUS value);
  public:

  // int64 login_time = 6;
  void clear_login_time();
  int64_t login_time() const;
  void set_login_time(int64_t value);
  private:
  int64_t _internal_login_time() const;
  void _internal_set_login_time(int64_t value);
  public:

  // int32 port = 10;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:S2S.S2SPlayerSessionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdk_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdk_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    int32_t channel_id_;
    int online_status_;
    int64_t login_time_;
    int32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s2s_5fglobal_5fdata_2eproto;
};
// -------------------------------------------------------------------

class S2SZoneServerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:S2S.S2SZoneServerData) */ {
 public:
  inline S2SZoneServerData() : S2SZoneServerData(nullptr) {}
  ~S2SZoneServerData() override;
  explicit PROTOBUF_CONSTEXPR S2SZoneServerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2SZoneServerData(const S2SZoneServerData& from);
  S2SZoneServerData(S2SZoneServerData&& from) noexcept
    : S2SZoneServerData() {
    *this = ::std::move(from);
  }

  inline S2SZoneServerData& operator=(const S2SZoneServerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2SZoneServerData& operator=(S2SZoneServerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2SZoneServerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2SZoneServerData* internal_default_instance() {
    return reinterpret_cast<const S2SZoneServerData*>(
               &_S2SZoneServerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S2SZoneServerData& a, S2SZoneServerData& b) {
    a.Swap(&b);
  }
  inline void Swap(S2SZoneServerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2SZoneServerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2SZoneServerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2SZoneServerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2SZoneServerData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2SZoneServerData& from) {
    S2SZoneServerData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SZoneServerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "S2S.S2SZoneServerData";
  }
  protected:
  explicit S2SZoneServerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 2,
    kIpFieldNumber = 4,
    kOnlinePlayersFieldNumber = 1,
    kPortFieldNumber = 3,
  };
  // string app_id = 2;
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string ip = 4;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 online_players = 1;
  void clear_online_players();
  int32_t online_players() const;
  void set_online_players(int32_t value);
  private:
  int32_t _internal_online_players() const;
  void _internal_set_online_players(int32_t value);
  public:

  // int32 port = 3;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:S2S.S2SZoneServerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    int32_t online_players_;
    int32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s2s_5fglobal_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S2SPlayerSessionData

// string sdk_user_id = 1;
inline void S2SPlayerSessionData::clear_sdk_user_id() {
  _impl_.sdk_user_id_.ClearToEmpty();
}
inline const std::string& S2SPlayerSessionData::sdk_user_id() const {
  // @@protoc_insertion_point(field_get:S2S.S2SPlayerSessionData.sdk_user_id)
  return _internal_sdk_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2SPlayerSessionData::set_sdk_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sdk_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:S2S.S2SPlayerSessionData.sdk_user_id)
}
inline std::string* S2SPlayerSessionData::mutable_sdk_user_id() {
  std::string* _s = _internal_mutable_sdk_user_id();
  // @@protoc_insertion_point(field_mutable:S2S.S2SPlayerSessionData.sdk_user_id)
  return _s;
}
inline const std::string& S2SPlayerSessionData::_internal_sdk_user_id() const {
  return _impl_.sdk_user_id_.Get();
}
inline void S2SPlayerSessionData::_internal_set_sdk_user_id(const std::string& value) {
  
  _impl_.sdk_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* S2SPlayerSessionData::_internal_mutable_sdk_user_id() {
  
  return _impl_.sdk_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* S2SPlayerSessionData::release_sdk_user_id() {
  // @@protoc_insertion_point(field_release:S2S.S2SPlayerSessionData.sdk_user_id)
  return _impl_.sdk_user_id_.Release();
}
inline void S2SPlayerSessionData::set_allocated_sdk_user_id(std::string* sdk_user_id) {
  if (sdk_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.sdk_user_id_.SetAllocated(sdk_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sdk_user_id_.IsDefault()) {
    _impl_.sdk_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:S2S.S2SPlayerSessionData.sdk_user_id)
}

// string sdk_token = 2;
inline void S2SPlayerSessionData::clear_sdk_token() {
  _impl_.sdk_token_.ClearToEmpty();
}
inline const std::string& S2SPlayerSessionData::sdk_token() const {
  // @@protoc_insertion_point(field_get:S2S.S2SPlayerSessionData.sdk_token)
  return _internal_sdk_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2SPlayerSessionData::set_sdk_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sdk_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:S2S.S2SPlayerSessionData.sdk_token)
}
inline std::string* S2SPlayerSessionData::mutable_sdk_token() {
  std::string* _s = _internal_mutable_sdk_token();
  // @@protoc_insertion_point(field_mutable:S2S.S2SPlayerSessionData.sdk_token)
  return _s;
}
inline const std::string& S2SPlayerSessionData::_internal_sdk_token() const {
  return _impl_.sdk_token_.Get();
}
inline void S2SPlayerSessionData::_internal_set_sdk_token(const std::string& value) {
  
  _impl_.sdk_token_.Set(value, GetArenaForAllocation());
}
inline std::string* S2SPlayerSessionData::_internal_mutable_sdk_token() {
  
  return _impl_.sdk_token_.Mutable(GetArenaForAllocation());
}
inline std::string* S2SPlayerSessionData::release_sdk_token() {
  // @@protoc_insertion_point(field_release:S2S.S2SPlayerSessionData.sdk_token)
  return _impl_.sdk_token_.Release();
}
inline void S2SPlayerSessionData::set_allocated_sdk_token(std::string* sdk_token) {
  if (sdk_token != nullptr) {
    
  } else {
    
  }
  _impl_.sdk_token_.SetAllocated(sdk_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sdk_token_.IsDefault()) {
    _impl_.sdk_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:S2S.S2SPlayerSessionData.sdk_token)
}

// int32 channel_id = 3;
inline void S2SPlayerSessionData::clear_channel_id() {
  _impl_.channel_id_ = 0;
}
inline int32_t S2SPlayerSessionData::_internal_channel_id() const {
  return _impl_.channel_id_;
}
inline int32_t S2SPlayerSessionData::channel_id() const {
  // @@protoc_insertion_point(field_get:S2S.S2SPlayerSessionData.channel_id)
  return _internal_channel_id();
}
inline void S2SPlayerSessionData::_internal_set_channel_id(int32_t value) {
  
  _impl_.channel_id_ = value;
}
inline void S2SPlayerSessionData::set_channel_id(int32_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:S2S.S2SPlayerSessionData.channel_id)
}

// string profile_id = 4;
inline void S2SPlayerSessionData::clear_profile_id() {
  _impl_.profile_id_.ClearToEmpty();
}
inline const std::string& S2SPlayerSessionData::profile_id() const {
  // @@protoc_insertion_point(field_get:S2S.S2SPlayerSessionData.profile_id)
  return _internal_profile_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2SPlayerSessionData::set_profile_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.profile_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:S2S.S2SPlayerSessionData.profile_id)
}
inline std::string* S2SPlayerSessionData::mutable_profile_id() {
  std::string* _s = _internal_mutable_profile_id();
  // @@protoc_insertion_point(field_mutable:S2S.S2SPlayerSessionData.profile_id)
  return _s;
}
inline const std::string& S2SPlayerSessionData::_internal_profile_id() const {
  return _impl_.profile_id_.Get();
}
inline void S2SPlayerSessionData::_internal_set_profile_id(const std::string& value) {
  
  _impl_.profile_id_.Set(value, GetArenaForAllocation());
}
inline std::string* S2SPlayerSessionData::_internal_mutable_profile_id() {
  
  return _impl_.profile_id_.Mutable(GetArenaForAllocation());
}
inline std::string* S2SPlayerSessionData::release_profile_id() {
  // @@protoc_insertion_point(field_release:S2S.S2SPlayerSessionData.profile_id)
  return _impl_.profile_id_.Release();
}
inline void S2SPlayerSessionData::set_allocated_profile_id(std::string* profile_id) {
  if (profile_id != nullptr) {
    
  } else {
    
  }
  _impl_.profile_id_.SetAllocated(profile_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.profile_id_.IsDefault()) {
    _impl_.profile_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:S2S.S2SPlayerSessionData.profile_id)
}

// .S2S.S2S_ONLINE_STATUS online_status = 5;
inline void S2SPlayerSessionData::clear_online_status() {
  _impl_.online_status_ = 0;
}
inline ::S2S::S2S_ONLINE_STATUS S2SPlayerSessionData::_internal_online_status() const {
  return static_cast< ::S2S::S2S_ONLINE_STATUS >(_impl_.online_status_);
}
inline ::S2S::S2S_ONLINE_STATUS S2SPlayerSessionData::online_status() const {
  // @@protoc_insertion_point(field_get:S2S.S2SPlayerSessionData.online_status)
  return _internal_online_status();
}
inline void S2SPlayerSessionData::_internal_set_online_status(::S2S::S2S_ONLINE_STATUS value) {
  
  _impl_.online_status_ = value;
}
inline void S2SPlayerSessionData::set_online_status(::S2S::S2S_ONLINE_STATUS value) {
  _internal_set_online_status(value);
  // @@protoc_insertion_point(field_set:S2S.S2SPlayerSessionData.online_status)
}

// int64 login_time = 6;
inline void S2SPlayerSessionData::clear_login_time() {
  _impl_.login_time_ = int64_t{0};
}
inline int64_t S2SPlayerSessionData::_internal_login_time() const {
  return _impl_.login_time_;
}
inline int64_t S2SPlayerSessionData::login_time() const {
  // @@protoc_insertion_point(field_get:S2S.S2SPlayerSessionData.login_time)
  return _internal_login_time();
}
inline void S2SPlayerSessionData::_internal_set_login_time(int64_t value) {
  
  _impl_.login_time_ = value;
}
inline void S2SPlayerSessionData::set_login_time(int64_t value) {
  _internal_set_login_time(value);
  // @@protoc_insertion_point(field_set:S2S.S2SPlayerSessionData.login_time)
}

// string login_token = 7;
inline void S2SPlayerSessionData::clear_login_token() {
  _impl_.login_token_.ClearToEmpty();
}
inline const std::string& S2SPlayerSessionData::login_token() const {
  // @@protoc_insertion_point(field_get:S2S.S2SPlayerSessionData.login_token)
  return _internal_login_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2SPlayerSessionData::set_login_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:S2S.S2SPlayerSessionData.login_token)
}
inline std::string* S2SPlayerSessionData::mutable_login_token() {
  std::string* _s = _internal_mutable_login_token();
  // @@protoc_insertion_point(field_mutable:S2S.S2SPlayerSessionData.login_token)
  return _s;
}
inline const std::string& S2SPlayerSessionData::_internal_login_token() const {
  return _impl_.login_token_.Get();
}
inline void S2SPlayerSessionData::_internal_set_login_token(const std::string& value) {
  
  _impl_.login_token_.Set(value, GetArenaForAllocation());
}
inline std::string* S2SPlayerSessionData::_internal_mutable_login_token() {
  
  return _impl_.login_token_.Mutable(GetArenaForAllocation());
}
inline std::string* S2SPlayerSessionData::release_login_token() {
  // @@protoc_insertion_point(field_release:S2S.S2SPlayerSessionData.login_token)
  return _impl_.login_token_.Release();
}
inline void S2SPlayerSessionData::set_allocated_login_token(std::string* login_token) {
  if (login_token != nullptr) {
    
  } else {
    
  }
  _impl_.login_token_.SetAllocated(login_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_token_.IsDefault()) {
    _impl_.login_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:S2S.S2SPlayerSessionData.login_token)
}

// string app_id = 8;
inline void S2SPlayerSessionData::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& S2SPlayerSessionData::app_id() const {
  // @@protoc_insertion_point(field_get:S2S.S2SPlayerSessionData.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2SPlayerSessionData::set_app_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.app_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:S2S.S2SPlayerSessionData.app_id)
}
inline std::string* S2SPlayerSessionData::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:S2S.S2SPlayerSessionData.app_id)
  return _s;
}
inline const std::string& S2SPlayerSessionData::_internal_app_id() const {
  return _impl_.app_id_.Get();
}
inline void S2SPlayerSessionData::_internal_set_app_id(const std::string& value) {
  
  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* S2SPlayerSessionData::_internal_mutable_app_id() {
  
  return _impl_.app_id_.Mutable(GetArenaForAllocation());
}
inline std::string* S2SPlayerSessionData::release_app_id() {
  // @@protoc_insertion_point(field_release:S2S.S2SPlayerSessionData.app_id)
  return _impl_.app_id_.Release();
}
inline void S2SPlayerSessionData::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  _impl_.app_id_.SetAllocated(app_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_id_.IsDefault()) {
    _impl_.app_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:S2S.S2SPlayerSessionData.app_id)
}

// string ip = 9;
inline void S2SPlayerSessionData::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& S2SPlayerSessionData::ip() const {
  // @@protoc_insertion_point(field_get:S2S.S2SPlayerSessionData.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2SPlayerSessionData::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:S2S.S2SPlayerSessionData.ip)
}
inline std::string* S2SPlayerSessionData::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:S2S.S2SPlayerSessionData.ip)
  return _s;
}
inline const std::string& S2SPlayerSessionData::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void S2SPlayerSessionData::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* S2SPlayerSessionData::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* S2SPlayerSessionData::release_ip() {
  // @@protoc_insertion_point(field_release:S2S.S2SPlayerSessionData.ip)
  return _impl_.ip_.Release();
}
inline void S2SPlayerSessionData::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:S2S.S2SPlayerSessionData.ip)
}

// int32 port = 10;
inline void S2SPlayerSessionData::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t S2SPlayerSessionData::_internal_port() const {
  return _impl_.port_;
}
inline int32_t S2SPlayerSessionData::port() const {
  // @@protoc_insertion_point(field_get:S2S.S2SPlayerSessionData.port)
  return _internal_port();
}
inline void S2SPlayerSessionData::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void S2SPlayerSessionData::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:S2S.S2SPlayerSessionData.port)
}

// -------------------------------------------------------------------

// S2SZoneServerData

// int32 online_players = 1;
inline void S2SZoneServerData::clear_online_players() {
  _impl_.online_players_ = 0;
}
inline int32_t S2SZoneServerData::_internal_online_players() const {
  return _impl_.online_players_;
}
inline int32_t S2SZoneServerData::online_players() const {
  // @@protoc_insertion_point(field_get:S2S.S2SZoneServerData.online_players)
  return _internal_online_players();
}
inline void S2SZoneServerData::_internal_set_online_players(int32_t value) {
  
  _impl_.online_players_ = value;
}
inline void S2SZoneServerData::set_online_players(int32_t value) {
  _internal_set_online_players(value);
  // @@protoc_insertion_point(field_set:S2S.S2SZoneServerData.online_players)
}

// string app_id = 2;
inline void S2SZoneServerData::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& S2SZoneServerData::app_id() const {
  // @@protoc_insertion_point(field_get:S2S.S2SZoneServerData.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2SZoneServerData::set_app_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.app_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:S2S.S2SZoneServerData.app_id)
}
inline std::string* S2SZoneServerData::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:S2S.S2SZoneServerData.app_id)
  return _s;
}
inline const std::string& S2SZoneServerData::_internal_app_id() const {
  return _impl_.app_id_.Get();
}
inline void S2SZoneServerData::_internal_set_app_id(const std::string& value) {
  
  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* S2SZoneServerData::_internal_mutable_app_id() {
  
  return _impl_.app_id_.Mutable(GetArenaForAllocation());
}
inline std::string* S2SZoneServerData::release_app_id() {
  // @@protoc_insertion_point(field_release:S2S.S2SZoneServerData.app_id)
  return _impl_.app_id_.Release();
}
inline void S2SZoneServerData::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  _impl_.app_id_.SetAllocated(app_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_id_.IsDefault()) {
    _impl_.app_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:S2S.S2SZoneServerData.app_id)
}

// int32 port = 3;
inline void S2SZoneServerData::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t S2SZoneServerData::_internal_port() const {
  return _impl_.port_;
}
inline int32_t S2SZoneServerData::port() const {
  // @@protoc_insertion_point(field_get:S2S.S2SZoneServerData.port)
  return _internal_port();
}
inline void S2SZoneServerData::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void S2SZoneServerData::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:S2S.S2SZoneServerData.port)
}

// string ip = 4;
inline void S2SZoneServerData::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& S2SZoneServerData::ip() const {
  // @@protoc_insertion_point(field_get:S2S.S2SZoneServerData.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2SZoneServerData::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:S2S.S2SZoneServerData.ip)
}
inline std::string* S2SZoneServerData::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:S2S.S2SZoneServerData.ip)
  return _s;
}
inline const std::string& S2SZoneServerData::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void S2SZoneServerData::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* S2SZoneServerData::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* S2SZoneServerData::release_ip() {
  // @@protoc_insertion_point(field_release:S2S.S2SZoneServerData.ip)
  return _impl_.ip_.Release();
}
inline void S2SZoneServerData::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:S2S.S2SZoneServerData.ip)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace S2S

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::S2S::S2S_ONLINE_STATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::S2S::S2S_ONLINE_STATUS>() {
  return ::S2S::S2S_ONLINE_STATUS_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_s2s_5fglobal_5fdata_2eproto
