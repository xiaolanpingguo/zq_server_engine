// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_player.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_db_5fplayer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_db_5fplayer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_db_5fplayer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_db_5fplayer_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_db_5fplayer_2eproto;
namespace DB {
class DBPlayer;
struct DBPlayerDefaultTypeInternal;
extern DBPlayerDefaultTypeInternal _DBPlayer_default_instance_;
class DBPlayerBaseInfo;
struct DBPlayerBaseInfoDefaultTypeInternal;
extern DBPlayerBaseInfoDefaultTypeInternal _DBPlayerBaseInfo_default_instance_;
}  // namespace DB
PROTOBUF_NAMESPACE_OPEN
template<> ::DB::DBPlayer* Arena::CreateMaybeMessage<::DB::DBPlayer>(Arena*);
template<> ::DB::DBPlayerBaseInfo* Arena::CreateMaybeMessage<::DB::DBPlayerBaseInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DB {

// ===================================================================

class DBPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DB.DBPlayer) */ {
 public:
  inline DBPlayer() : DBPlayer(nullptr) {}
  ~DBPlayer() override;
  explicit PROTOBUF_CONSTEXPR DBPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBPlayer(const DBPlayer& from);
  DBPlayer(DBPlayer&& from) noexcept
    : DBPlayer() {
    *this = ::std::move(from);
  }

  inline DBPlayer& operator=(const DBPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBPlayer& operator=(DBPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBPlayer* internal_default_instance() {
    return reinterpret_cast<const DBPlayer*>(
               &_DBPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DBPlayer& a, DBPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(DBPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBPlayer& from) {
    DBPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DB.DBPlayer";
  }
  protected:
  explicit DBPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerBaseInfoFieldNumber = 1,
  };
  // .DB.DBPlayerBaseInfo player_base_info = 1;
  bool has_player_base_info() const;
  private:
  bool _internal_has_player_base_info() const;
  public:
  void clear_player_base_info();
  const ::DB::DBPlayerBaseInfo& player_base_info() const;
  PROTOBUF_NODISCARD ::DB::DBPlayerBaseInfo* release_player_base_info();
  ::DB::DBPlayerBaseInfo* mutable_player_base_info();
  void set_allocated_player_base_info(::DB::DBPlayerBaseInfo* player_base_info);
  private:
  const ::DB::DBPlayerBaseInfo& _internal_player_base_info() const;
  ::DB::DBPlayerBaseInfo* _internal_mutable_player_base_info();
  public:
  void unsafe_arena_set_allocated_player_base_info(
      ::DB::DBPlayerBaseInfo* player_base_info);
  ::DB::DBPlayerBaseInfo* unsafe_arena_release_player_base_info();

  // @@protoc_insertion_point(class_scope:DB.DBPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DB::DBPlayerBaseInfo* player_base_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_5fplayer_2eproto;
};
// -------------------------------------------------------------------

class DBPlayerBaseInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DB.DBPlayerBaseInfo) */ {
 public:
  inline DBPlayerBaseInfo() : DBPlayerBaseInfo(nullptr) {}
  ~DBPlayerBaseInfo() override;
  explicit PROTOBUF_CONSTEXPR DBPlayerBaseInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBPlayerBaseInfo(const DBPlayerBaseInfo& from);
  DBPlayerBaseInfo(DBPlayerBaseInfo&& from) noexcept
    : DBPlayerBaseInfo() {
    *this = ::std::move(from);
  }

  inline DBPlayerBaseInfo& operator=(const DBPlayerBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBPlayerBaseInfo& operator=(DBPlayerBaseInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBPlayerBaseInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBPlayerBaseInfo* internal_default_instance() {
    return reinterpret_cast<const DBPlayerBaseInfo*>(
               &_DBPlayerBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DBPlayerBaseInfo& a, DBPlayerBaseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DBPlayerBaseInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBPlayerBaseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBPlayerBaseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBPlayerBaseInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBPlayerBaseInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBPlayerBaseInfo& from) {
    DBPlayerBaseInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBPlayerBaseInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DB.DBPlayerBaseInfo";
  }
  protected:
  explicit DBPlayerBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 3,
    kIpFieldNumber = 4,
    kUidFieldNumber = 1,
    kOpenidFieldNumber = 2,
  };
  // string nickname = 3;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string ip = 4;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int64 uid = 1;
  void clear_uid();
  int64_t uid() const;
  void set_uid(int64_t value);
  private:
  int64_t _internal_uid() const;
  void _internal_set_uid(int64_t value);
  public:

  // int64 openid = 2;
  void clear_openid();
  int64_t openid() const;
  void set_openid(int64_t value);
  private:
  int64_t _internal_openid() const;
  void _internal_set_openid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:DB.DBPlayerBaseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    int64_t uid_;
    int64_t openid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_5fplayer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DBPlayer

// .DB.DBPlayerBaseInfo player_base_info = 1;
inline bool DBPlayer::_internal_has_player_base_info() const {
  return this != internal_default_instance() && _impl_.player_base_info_ != nullptr;
}
inline bool DBPlayer::has_player_base_info() const {
  return _internal_has_player_base_info();
}
inline void DBPlayer::clear_player_base_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_base_info_ != nullptr) {
    delete _impl_.player_base_info_;
  }
  _impl_.player_base_info_ = nullptr;
}
inline const ::DB::DBPlayerBaseInfo& DBPlayer::_internal_player_base_info() const {
  const ::DB::DBPlayerBaseInfo* p = _impl_.player_base_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::DB::DBPlayerBaseInfo&>(
      ::DB::_DBPlayerBaseInfo_default_instance_);
}
inline const ::DB::DBPlayerBaseInfo& DBPlayer::player_base_info() const {
  // @@protoc_insertion_point(field_get:DB.DBPlayer.player_base_info)
  return _internal_player_base_info();
}
inline void DBPlayer::unsafe_arena_set_allocated_player_base_info(
    ::DB::DBPlayerBaseInfo* player_base_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_base_info_);
  }
  _impl_.player_base_info_ = player_base_info;
  if (player_base_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DB.DBPlayer.player_base_info)
}
inline ::DB::DBPlayerBaseInfo* DBPlayer::release_player_base_info() {
  
  ::DB::DBPlayerBaseInfo* temp = _impl_.player_base_info_;
  _impl_.player_base_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DB::DBPlayerBaseInfo* DBPlayer::unsafe_arena_release_player_base_info() {
  // @@protoc_insertion_point(field_release:DB.DBPlayer.player_base_info)
  
  ::DB::DBPlayerBaseInfo* temp = _impl_.player_base_info_;
  _impl_.player_base_info_ = nullptr;
  return temp;
}
inline ::DB::DBPlayerBaseInfo* DBPlayer::_internal_mutable_player_base_info() {
  
  if (_impl_.player_base_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::DB::DBPlayerBaseInfo>(GetArenaForAllocation());
    _impl_.player_base_info_ = p;
  }
  return _impl_.player_base_info_;
}
inline ::DB::DBPlayerBaseInfo* DBPlayer::mutable_player_base_info() {
  ::DB::DBPlayerBaseInfo* _msg = _internal_mutable_player_base_info();
  // @@protoc_insertion_point(field_mutable:DB.DBPlayer.player_base_info)
  return _msg;
}
inline void DBPlayer::set_allocated_player_base_info(::DB::DBPlayerBaseInfo* player_base_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_base_info_;
  }
  if (player_base_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_base_info);
    if (message_arena != submessage_arena) {
      player_base_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_base_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_base_info_ = player_base_info;
  // @@protoc_insertion_point(field_set_allocated:DB.DBPlayer.player_base_info)
}

// -------------------------------------------------------------------

// DBPlayerBaseInfo

// int64 uid = 1;
inline void DBPlayerBaseInfo::clear_uid() {
  _impl_.uid_ = int64_t{0};
}
inline int64_t DBPlayerBaseInfo::_internal_uid() const {
  return _impl_.uid_;
}
inline int64_t DBPlayerBaseInfo::uid() const {
  // @@protoc_insertion_point(field_get:DB.DBPlayerBaseInfo.uid)
  return _internal_uid();
}
inline void DBPlayerBaseInfo::_internal_set_uid(int64_t value) {
  
  _impl_.uid_ = value;
}
inline void DBPlayerBaseInfo::set_uid(int64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:DB.DBPlayerBaseInfo.uid)
}

// int64 openid = 2;
inline void DBPlayerBaseInfo::clear_openid() {
  _impl_.openid_ = int64_t{0};
}
inline int64_t DBPlayerBaseInfo::_internal_openid() const {
  return _impl_.openid_;
}
inline int64_t DBPlayerBaseInfo::openid() const {
  // @@protoc_insertion_point(field_get:DB.DBPlayerBaseInfo.openid)
  return _internal_openid();
}
inline void DBPlayerBaseInfo::_internal_set_openid(int64_t value) {
  
  _impl_.openid_ = value;
}
inline void DBPlayerBaseInfo::set_openid(int64_t value) {
  _internal_set_openid(value);
  // @@protoc_insertion_point(field_set:DB.DBPlayerBaseInfo.openid)
}

// string nickname = 3;
inline void DBPlayerBaseInfo::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& DBPlayerBaseInfo::nickname() const {
  // @@protoc_insertion_point(field_get:DB.DBPlayerBaseInfo.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBPlayerBaseInfo::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DB.DBPlayerBaseInfo.nickname)
}
inline std::string* DBPlayerBaseInfo::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:DB.DBPlayerBaseInfo.nickname)
  return _s;
}
inline const std::string& DBPlayerBaseInfo::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void DBPlayerBaseInfo::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* DBPlayerBaseInfo::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* DBPlayerBaseInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:DB.DBPlayerBaseInfo.nickname)
  return _impl_.nickname_.Release();
}
inline void DBPlayerBaseInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DB.DBPlayerBaseInfo.nickname)
}

// string ip = 4;
inline void DBPlayerBaseInfo::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& DBPlayerBaseInfo::ip() const {
  // @@protoc_insertion_point(field_get:DB.DBPlayerBaseInfo.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBPlayerBaseInfo::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DB.DBPlayerBaseInfo.ip)
}
inline std::string* DBPlayerBaseInfo::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:DB.DBPlayerBaseInfo.ip)
  return _s;
}
inline const std::string& DBPlayerBaseInfo::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void DBPlayerBaseInfo::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* DBPlayerBaseInfo::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* DBPlayerBaseInfo::release_ip() {
  // @@protoc_insertion_point(field_release:DB.DBPlayerBaseInfo.ip)
  return _impl_.ip_.Release();
}
inline void DBPlayerBaseInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DB.DBPlayerBaseInfo.ip)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DB

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_db_5fplayer_2eproto
