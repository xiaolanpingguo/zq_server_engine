// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2s_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_s2s_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_s2s_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_s2s_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_s2s_5fcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_s2s_5fcommon_2eproto;
namespace S2S {
class S2SHeartBeat;
struct S2SHeartBeatDefaultTypeInternal;
extern S2SHeartBeatDefaultTypeInternal _S2SHeartBeat_default_instance_;
class S2SServerRegisterReq;
struct S2SServerRegisterReqDefaultTypeInternal;
extern S2SServerRegisterReqDefaultTypeInternal _S2SServerRegisterReq_default_instance_;
class S2SServerRegisterRes;
struct S2SServerRegisterResDefaultTypeInternal;
extern S2SServerRegisterResDefaultTypeInternal _S2SServerRegisterRes_default_instance_;
class ServerInfo;
struct ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
}  // namespace S2S
PROTOBUF_NAMESPACE_OPEN
template<> ::S2S::S2SHeartBeat* Arena::CreateMaybeMessage<::S2S::S2SHeartBeat>(Arena*);
template<> ::S2S::S2SServerRegisterReq* Arena::CreateMaybeMessage<::S2S::S2SServerRegisterReq>(Arena*);
template<> ::S2S::S2SServerRegisterRes* Arena::CreateMaybeMessage<::S2S::S2SServerRegisterRes>(Arena*);
template<> ::S2S::ServerInfo* Arena::CreateMaybeMessage<::S2S::ServerInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace S2S {

enum S2S_MSG_ID : int {
  MSG_ID_NONE = 0,
  MSG_ID_HEARTBEAT = 101,
  MSG_ID_SERVER_REGSTER_REQ = 102,
  MSG_ID_SERVER_REGSTER_RES = 103,
  MSG_ID_DB_INSERT_REQ = 1,
  MSG_ID_DB_INSERT_RES = 2,
  MSG_ID_DB_REMOVE_REQ = 3,
  MSG_ID_DB_REMOVE_RES = 4,
  MSG_ID_DB_SAVE_REQ = 5,
  MSG_ID_DB_SAVE_RES = 6,
  MSG_ID_DB_FIND_REQ = 7,
  MSG_ID_DB_FIND_RES = 8,
  MSG_ID_DB_BATCH_FIND_REQ = 9,
  MSG_ID_DB_BATCH_FIND_RES = 10,
  S2S_MSG_ID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  S2S_MSG_ID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool S2S_MSG_ID_IsValid(int value);
constexpr S2S_MSG_ID S2S_MSG_ID_MIN = MSG_ID_NONE;
constexpr S2S_MSG_ID S2S_MSG_ID_MAX = MSG_ID_SERVER_REGSTER_RES;
constexpr int S2S_MSG_ID_ARRAYSIZE = S2S_MSG_ID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* S2S_MSG_ID_descriptor();
template<typename T>
inline const std::string& S2S_MSG_ID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, S2S_MSG_ID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function S2S_MSG_ID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    S2S_MSG_ID_descriptor(), enum_t_value);
}
inline bool S2S_MSG_ID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, S2S_MSG_ID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<S2S_MSG_ID>(
    S2S_MSG_ID_descriptor(), name, value);
}
// ===================================================================

class S2SHeartBeat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:S2S.S2SHeartBeat) */ {
 public:
  inline S2SHeartBeat() : S2SHeartBeat(nullptr) {}
  ~S2SHeartBeat() override;
  explicit PROTOBUF_CONSTEXPR S2SHeartBeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2SHeartBeat(const S2SHeartBeat& from);
  S2SHeartBeat(S2SHeartBeat&& from) noexcept
    : S2SHeartBeat() {
    *this = ::std::move(from);
  }

  inline S2SHeartBeat& operator=(const S2SHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2SHeartBeat& operator=(S2SHeartBeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2SHeartBeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2SHeartBeat* internal_default_instance() {
    return reinterpret_cast<const S2SHeartBeat*>(
               &_S2SHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S2SHeartBeat& a, S2SHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(S2SHeartBeat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2SHeartBeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2SHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2SHeartBeat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2SHeartBeat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2SHeartBeat& from) {
    S2SHeartBeat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SHeartBeat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "S2S.S2SHeartBeat";
  }
  protected:
  explicit S2SHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string app_id = 1;
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // int32 state = 2;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:S2S.S2SHeartBeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
    int32_t state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s2s_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:S2S.ServerInfo) */ {
 public:
  inline ServerInfo() : ServerInfo(nullptr) {}
  ~ServerInfo() override;
  explicit PROTOBUF_CONSTEXPR ServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerInfo(const ServerInfo& from);
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerInfo& from) {
    ServerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "S2S.ServerInfo";
  }
  protected:
  explicit ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kInternalIpFieldNumber = 2,
    kInternalPortFieldNumber = 3,
  };
  // string app_id = 1;
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string internal_ip = 2;
  void clear_internal_ip();
  const std::string& internal_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_internal_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_internal_ip();
  PROTOBUF_NODISCARD std::string* release_internal_ip();
  void set_allocated_internal_ip(std::string* internal_ip);
  private:
  const std::string& _internal_internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_internal_ip(const std::string& value);
  std::string* _internal_mutable_internal_ip();
  public:

  // int32 internal_port = 3;
  void clear_internal_port();
  int32_t internal_port() const;
  void set_internal_port(int32_t value);
  private:
  int32_t _internal_internal_port() const;
  void _internal_set_internal_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:S2S.ServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr internal_ip_;
    int32_t internal_port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s2s_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class S2SServerRegisterReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:S2S.S2SServerRegisterReq) */ {
 public:
  inline S2SServerRegisterReq() : S2SServerRegisterReq(nullptr) {}
  ~S2SServerRegisterReq() override;
  explicit PROTOBUF_CONSTEXPR S2SServerRegisterReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2SServerRegisterReq(const S2SServerRegisterReq& from);
  S2SServerRegisterReq(S2SServerRegisterReq&& from) noexcept
    : S2SServerRegisterReq() {
    *this = ::std::move(from);
  }

  inline S2SServerRegisterReq& operator=(const S2SServerRegisterReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2SServerRegisterReq& operator=(S2SServerRegisterReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2SServerRegisterReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2SServerRegisterReq* internal_default_instance() {
    return reinterpret_cast<const S2SServerRegisterReq*>(
               &_S2SServerRegisterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S2SServerRegisterReq& a, S2SServerRegisterReq& b) {
    a.Swap(&b);
  }
  inline void Swap(S2SServerRegisterReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2SServerRegisterReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2SServerRegisterReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2SServerRegisterReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2SServerRegisterReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2SServerRegisterReq& from) {
    S2SServerRegisterReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SServerRegisterReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "S2S.S2SServerRegisterReq";
  }
  protected:
  explicit S2SServerRegisterReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerInfoFieldNumber = 1,
  };
  // .S2S.ServerInfo server_info = 1;
  bool has_server_info() const;
  private:
  bool _internal_has_server_info() const;
  public:
  void clear_server_info();
  const ::S2S::ServerInfo& server_info() const;
  PROTOBUF_NODISCARD ::S2S::ServerInfo* release_server_info();
  ::S2S::ServerInfo* mutable_server_info();
  void set_allocated_server_info(::S2S::ServerInfo* server_info);
  private:
  const ::S2S::ServerInfo& _internal_server_info() const;
  ::S2S::ServerInfo* _internal_mutable_server_info();
  public:
  void unsafe_arena_set_allocated_server_info(
      ::S2S::ServerInfo* server_info);
  ::S2S::ServerInfo* unsafe_arena_release_server_info();

  // @@protoc_insertion_point(class_scope:S2S.S2SServerRegisterReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::S2S::ServerInfo* server_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s2s_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class S2SServerRegisterRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:S2S.S2SServerRegisterRes) */ {
 public:
  inline S2SServerRegisterRes() : S2SServerRegisterRes(nullptr) {}
  ~S2SServerRegisterRes() override;
  explicit PROTOBUF_CONSTEXPR S2SServerRegisterRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2SServerRegisterRes(const S2SServerRegisterRes& from);
  S2SServerRegisterRes(S2SServerRegisterRes&& from) noexcept
    : S2SServerRegisterRes() {
    *this = ::std::move(from);
  }

  inline S2SServerRegisterRes& operator=(const S2SServerRegisterRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2SServerRegisterRes& operator=(S2SServerRegisterRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2SServerRegisterRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2SServerRegisterRes* internal_default_instance() {
    return reinterpret_cast<const S2SServerRegisterRes*>(
               &_S2SServerRegisterRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S2SServerRegisterRes& a, S2SServerRegisterRes& b) {
    a.Swap(&b);
  }
  inline void Swap(S2SServerRegisterRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2SServerRegisterRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2SServerRegisterRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2SServerRegisterRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2SServerRegisterRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2SServerRegisterRes& from) {
    S2SServerRegisterRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SServerRegisterRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "S2S.S2SServerRegisterRes";
  }
  protected:
  explicit S2SServerRegisterRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:S2S.S2SServerRegisterRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s2s_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S2SHeartBeat

// string app_id = 1;
inline void S2SHeartBeat::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& S2SHeartBeat::app_id() const {
  // @@protoc_insertion_point(field_get:S2S.S2SHeartBeat.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2SHeartBeat::set_app_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.app_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:S2S.S2SHeartBeat.app_id)
}
inline std::string* S2SHeartBeat::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:S2S.S2SHeartBeat.app_id)
  return _s;
}
inline const std::string& S2SHeartBeat::_internal_app_id() const {
  return _impl_.app_id_.Get();
}
inline void S2SHeartBeat::_internal_set_app_id(const std::string& value) {
  
  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* S2SHeartBeat::_internal_mutable_app_id() {
  
  return _impl_.app_id_.Mutable(GetArenaForAllocation());
}
inline std::string* S2SHeartBeat::release_app_id() {
  // @@protoc_insertion_point(field_release:S2S.S2SHeartBeat.app_id)
  return _impl_.app_id_.Release();
}
inline void S2SHeartBeat::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  _impl_.app_id_.SetAllocated(app_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_id_.IsDefault()) {
    _impl_.app_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:S2S.S2SHeartBeat.app_id)
}

// int32 state = 2;
inline void S2SHeartBeat::clear_state() {
  _impl_.state_ = 0;
}
inline int32_t S2SHeartBeat::_internal_state() const {
  return _impl_.state_;
}
inline int32_t S2SHeartBeat::state() const {
  // @@protoc_insertion_point(field_get:S2S.S2SHeartBeat.state)
  return _internal_state();
}
inline void S2SHeartBeat::_internal_set_state(int32_t value) {
  
  _impl_.state_ = value;
}
inline void S2SHeartBeat::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:S2S.S2SHeartBeat.state)
}

// -------------------------------------------------------------------

// ServerInfo

// string app_id = 1;
inline void ServerInfo::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& ServerInfo::app_id() const {
  // @@protoc_insertion_point(field_get:S2S.ServerInfo.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfo::set_app_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.app_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:S2S.ServerInfo.app_id)
}
inline std::string* ServerInfo::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:S2S.ServerInfo.app_id)
  return _s;
}
inline const std::string& ServerInfo::_internal_app_id() const {
  return _impl_.app_id_.Get();
}
inline void ServerInfo::_internal_set_app_id(const std::string& value) {
  
  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerInfo::_internal_mutable_app_id() {
  
  return _impl_.app_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerInfo::release_app_id() {
  // @@protoc_insertion_point(field_release:S2S.ServerInfo.app_id)
  return _impl_.app_id_.Release();
}
inline void ServerInfo::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  _impl_.app_id_.SetAllocated(app_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_id_.IsDefault()) {
    _impl_.app_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:S2S.ServerInfo.app_id)
}

// string internal_ip = 2;
inline void ServerInfo::clear_internal_ip() {
  _impl_.internal_ip_.ClearToEmpty();
}
inline const std::string& ServerInfo::internal_ip() const {
  // @@protoc_insertion_point(field_get:S2S.ServerInfo.internal_ip)
  return _internal_internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfo::set_internal_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.internal_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:S2S.ServerInfo.internal_ip)
}
inline std::string* ServerInfo::mutable_internal_ip() {
  std::string* _s = _internal_mutable_internal_ip();
  // @@protoc_insertion_point(field_mutable:S2S.ServerInfo.internal_ip)
  return _s;
}
inline const std::string& ServerInfo::_internal_internal_ip() const {
  return _impl_.internal_ip_.Get();
}
inline void ServerInfo::_internal_set_internal_ip(const std::string& value) {
  
  _impl_.internal_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerInfo::_internal_mutable_internal_ip() {
  
  return _impl_.internal_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerInfo::release_internal_ip() {
  // @@protoc_insertion_point(field_release:S2S.ServerInfo.internal_ip)
  return _impl_.internal_ip_.Release();
}
inline void ServerInfo::set_allocated_internal_ip(std::string* internal_ip) {
  if (internal_ip != nullptr) {
    
  } else {
    
  }
  _impl_.internal_ip_.SetAllocated(internal_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.internal_ip_.IsDefault()) {
    _impl_.internal_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:S2S.ServerInfo.internal_ip)
}

// int32 internal_port = 3;
inline void ServerInfo::clear_internal_port() {
  _impl_.internal_port_ = 0;
}
inline int32_t ServerInfo::_internal_internal_port() const {
  return _impl_.internal_port_;
}
inline int32_t ServerInfo::internal_port() const {
  // @@protoc_insertion_point(field_get:S2S.ServerInfo.internal_port)
  return _internal_internal_port();
}
inline void ServerInfo::_internal_set_internal_port(int32_t value) {
  
  _impl_.internal_port_ = value;
}
inline void ServerInfo::set_internal_port(int32_t value) {
  _internal_set_internal_port(value);
  // @@protoc_insertion_point(field_set:S2S.ServerInfo.internal_port)
}

// -------------------------------------------------------------------

// S2SServerRegisterReq

// .S2S.ServerInfo server_info = 1;
inline bool S2SServerRegisterReq::_internal_has_server_info() const {
  return this != internal_default_instance() && _impl_.server_info_ != nullptr;
}
inline bool S2SServerRegisterReq::has_server_info() const {
  return _internal_has_server_info();
}
inline void S2SServerRegisterReq::clear_server_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.server_info_ != nullptr) {
    delete _impl_.server_info_;
  }
  _impl_.server_info_ = nullptr;
}
inline const ::S2S::ServerInfo& S2SServerRegisterReq::_internal_server_info() const {
  const ::S2S::ServerInfo* p = _impl_.server_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::S2S::ServerInfo&>(
      ::S2S::_ServerInfo_default_instance_);
}
inline const ::S2S::ServerInfo& S2SServerRegisterReq::server_info() const {
  // @@protoc_insertion_point(field_get:S2S.S2SServerRegisterReq.server_info)
  return _internal_server_info();
}
inline void S2SServerRegisterReq::unsafe_arena_set_allocated_server_info(
    ::S2S::ServerInfo* server_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.server_info_);
  }
  _impl_.server_info_ = server_info;
  if (server_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:S2S.S2SServerRegisterReq.server_info)
}
inline ::S2S::ServerInfo* S2SServerRegisterReq::release_server_info() {
  
  ::S2S::ServerInfo* temp = _impl_.server_info_;
  _impl_.server_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::S2S::ServerInfo* S2SServerRegisterReq::unsafe_arena_release_server_info() {
  // @@protoc_insertion_point(field_release:S2S.S2SServerRegisterReq.server_info)
  
  ::S2S::ServerInfo* temp = _impl_.server_info_;
  _impl_.server_info_ = nullptr;
  return temp;
}
inline ::S2S::ServerInfo* S2SServerRegisterReq::_internal_mutable_server_info() {
  
  if (_impl_.server_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::S2S::ServerInfo>(GetArenaForAllocation());
    _impl_.server_info_ = p;
  }
  return _impl_.server_info_;
}
inline ::S2S::ServerInfo* S2SServerRegisterReq::mutable_server_info() {
  ::S2S::ServerInfo* _msg = _internal_mutable_server_info();
  // @@protoc_insertion_point(field_mutable:S2S.S2SServerRegisterReq.server_info)
  return _msg;
}
inline void S2SServerRegisterReq::set_allocated_server_info(::S2S::ServerInfo* server_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.server_info_;
  }
  if (server_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(server_info);
    if (message_arena != submessage_arena) {
      server_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.server_info_ = server_info;
  // @@protoc_insertion_point(field_set_allocated:S2S.S2SServerRegisterReq.server_info)
}

// -------------------------------------------------------------------

// S2SServerRegisterRes

// bool success = 1;
inline void S2SServerRegisterRes::clear_success() {
  _impl_.success_ = false;
}
inline bool S2SServerRegisterRes::_internal_success() const {
  return _impl_.success_;
}
inline bool S2SServerRegisterRes::success() const {
  // @@protoc_insertion_point(field_get:S2S.S2SServerRegisterRes.success)
  return _internal_success();
}
inline void S2SServerRegisterRes::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S2SServerRegisterRes::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:S2S.S2SServerRegisterRes.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace S2S

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::S2S::S2S_MSG_ID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::S2S::S2S_MSG_ID>() {
  return ::S2S::S2S_MSG_ID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_s2s_5fcommon_2eproto
